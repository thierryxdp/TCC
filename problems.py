def getProblems():
    data_array = []
    
    # 02 - Funções e Tipos de dados
    # data_array.append(["def num_bombons(m, p):\n    return m//p\n", "Pedrinho quer comprar o maior número de bombons possível com o dinheiro que tem. Faça uma função chamada num_bombons para calcular quantos bombons ele consegue comprar, dados o dinheiro e o preço do bombom para realização da compra.", "Funções e Tipos de dados", ['def test_case_1():\n    assert num_bombons(48.24, 5.35) == 9.0\n', 'def test_case_2():\n    assert num_bombons(79.96, 1.43) == 55.0\n', 'def test_case_3():\n    assert num_bombons(72.35, 9.93) == 7.0\n', 'def test_case_4():\n    assert num_bombons(88.18, 1.36) == 64.0\n', 'def test_case_5():\n    assert num_bombons(53.28, 1.47) == 36.0\n', 'def test_case_6():\n    assert num_bombons(8.61, 0.7) == 12.0\n', 'def test_case_7():\n    assert num_bombons(27.72, 4.2) == 6.0\n', 'def test_case_8():\n    assert num_bombons(52.33, 3.89) == 13.0\n', 'def test_case_9():\n    assert num_bombons(0, 0.1) == 0.0\n', 'def test_case_10():\n    assert num_bombons(1.0, 0.5) == 2.0\n']])
    # data_array.append(["def carros(passageiros: int,capacidade) -> int:\n    return math.ceil(passageiros/capacidade)\n", "Um grupo de amigos deseja fazer uma viagem e decidiram ir de carro. Pelas regras rodoviárias um veículo convencional tem a capacidade de transportar até 5 passageiros, porém há veículos com outras capacidades. Construa uma função em Python chamada carros para calcular e retornar o número exato de carros necessários para esta viagem, considerando que seja dado como entrada o número de pessoas. Caso os veículos considerados sejam de capacidades não convencionais, será dado também como entrada a capacidade dos veículos, considerando que todos os veículos são iguais.", "Funções e Tipos de dados", ['def test_case_1():\n    assert carros(12) == 3\n', 'def test_case_2():\n    assert carros(1) == 1\n', 'def test_case_3():\n    assert carros(16) == 4\n', 'def test_case_4():\n    assert carros(3, 1) == 3\n', 'def test_case_5():\n    assert carros(1, 3) == 1\n', 'def test_case_6():\n    assert carros(16, 6) == 3\n', 'def test_case_7():\n    assert carros(14, 4) == 4\n', 'def test_case_8():\n    assert carros(11, 6) == 2\n', 'def test_case_9():\n    assert carros(0) == 0\n', 'def test_case_10():\n    assert carros(5) == 1\n']])
    # data_array.append(["def bolo(a: int,b: int,c: int) -> int:\n    return min(a//2,b//3,c//5)\n", "*Questão OBI (Olimpíada Brasileira de Informática - OBI2012, Fase 2, Nível Júnior) - (Receita de Bolo)*\n\nJoão deseja fazer bolos para seus amigos, usando uma receita que indica que devem ser usadas 2 xícaras de farinha de trigo, 3 ovos e 5 colheres de sopa de leite.\nEm casa ele tem **A** xícaras de farinha de trigo, **B** ovos e **C** colheres de sopa de leite. João não tem muita prática com a cozinha, e portanto ele só se arriscará a\nfazer medidas exatas da receita de bolo (por exemplo, se ele tiver material suficiente para fazer mais do que 2 e menos do que 3 bolos, ele fará somente 2 bolos). \nSabendo disto, ajude João escrevendo uma função chamada **bolos** que determine qual a quantidade máxima de bolos que ele consegue fazer.\n\n- **Entrada:** Os parâmetros de entrada da função são três números inteiros A, B e C, indicando respectivamente o número de xícaras de farinha de trigo, o número de ovos e o número de colheres de sopa de leite que João tem em casa.\n\n- **Saída:** Sua função deve retornar a quantidade máxima de bolos que João consegue fazer.\n\nExemplos:\n\n- Entrada: 4, 6, 10;\nSaída: 2\n- Entrada: 4, 6, 9 ;\nSaída: 1'", "Funcoes e Tipos de dados", ['def test_case_1():\n    assert bolo(2, 50, 3) == 0\n', 'def test_case_2():\n    assert bolo(2, 3, 5) == 1\n', 'def test_case_3():\n    assert bolo(6, 9, 15) == 3\n', 'def test_case_4():\n    assert bolo(2, 6, 50) == 1\n', 'def test_case_5():\n    assert bolo(20, 15, 500) == 5\n', 'def test_case_6():\n    assert bolo(20, 15, 10) == 2\n', 'def test_case_7():\n    assert bolo(4, 6, 10) == 2\n', 'def test_case_8():\n    assert bolo(4, 6, 9) == 1\n', 'def test_case_9():\n    assert bolo(0, 5, 5) == 0\n', 'def test_case_10():\n    assert bolo(10, 1, 5) == 0\n']])
    
    # 03 - Tipos de dados, Strings, Estrutura Condicional
    # data_array.append(["def PosNegZero(x: int) -> str:\n    if x > 0:\n        return str(x) + ' e positivo'\n    if x < 0:\n        return str(x) + ' e negativo'\n    return str(x) + ' e zero'\n", "Faça uma função chamada PosNegZero que determina se um número inteiro X passado como parâmetro é positivo, negativo ou zero. O valor de retorno da função deve ser uma dentre as strings “X e positivo”, “X e negativo” ou “X e zero”.", "Tipos de dados, Strings, Estrutura Condicional", ["def test_case_1():\n    assert PosNegZero(51) == '51 e positivo'\n", "def test_case_2():\n    assert PosNegZero(-71) == '-71 e negativo'\n", "def test_case_3():\n    assert PosNegZero(-45) == '-45 e negativo'\n", "def test_case_4():\n    assert PosNegZero(-47) == '-47 e negativo'\n", "def test_case_5():\n    assert PosNegZero(44) == '44 e positivo'\n", "def test_case_6():\n    assert PosNegZero(-27) == '-27 e negativo'\n", "def test_case_7():\n    assert PosNegZero(-4) == '-4 e negativo'\n", "def test_case_8():\n    assert PosNegZero(71) == '71 e positivo'\n", "def test_case_9():\n    assert PosNegZero(12) == '12 e positivo'\n", "def test_case_10():\n    assert PosNegZero(73) == '73 e positivo'\n", "def test_case_11():\n    assert PosNegZero(30) == '30 e positivo'\n", "def test_case_12():\n    assert PosNegZero(-66) == '-66 e negativo'\n", "def test_case_13():\n    assert PosNegZero(-49) == '-49 e negativo'\n", "def test_case_14():\n    assert PosNegZero(-23) == '-23 e negativo'\n", "def test_case_15():\n    assert PosNegZero(18) == '18 e positivo'\n", "def test_case_16():\n    assert PosNegZero(50) == '50 e positivo'\n", "def test_case_17():\n    assert PosNegZero(40) == '40 e positivo'\n", "def test_case_18():\n    assert PosNegZero(-26) == '-26 e negativo'\n", "def test_case_19():\n    assert PosNegZero(-16) == '-16 e negativo'\n", "def test_case_20():\n    assert PosNegZero(-73) == '-73 e negativo'\n", "def test_case_21():\n    assert PosNegZero(-75) == '-75 e negativo'\n", "def test_case_22():\n    assert PosNegZero(3) == '3 e positivo'\n", "def test_case_23():\n    assert PosNegZero(-75) == '-75 e negativo'\n", "def test_case_24():\n    assert PosNegZero(10) == '10 e positivo'\n", "def test_case_25():\n    assert PosNegZero(31) == '31 e positivo'\n", "def test_case_26():\n    assert PosNegZero(6) == '6 e positivo'\n", "def test_case_27():\n    assert PosNegZero(51) == '51 e positivo'\n", "def test_case_28():\n    assert PosNegZero(28) == '28 e positivo'\n", "def test_case_29():\n    assert PosNegZero(47) == '47 e positivo'\n", "def test_case_30():\n    assert PosNegZero(48) == '48 e positivo'\n", "def test_case_31():\n    assert PosNegZero(34) == '34 e positivo'\n", "def test_case_32():\n    assert PosNegZero(43) == '43 e positivo'\n", "def test_case_33():\n    assert PosNegZero(28) == '28 e positivo'\n", "def test_case_34():\n    assert PosNegZero(38) == '38 e positivo'\n", "def test_case_35():\n    assert PosNegZero(-74) == '-74 e negativo'\n", "def test_case_36():\n    assert PosNegZero(14) == '14 e positivo'\n", "def test_case_37():\n    assert PosNegZero(14) == '14 e positivo'\n", "def test_case_38():\n    assert PosNegZero(24) == '24 e positivo'\n", "def test_case_39():\n    assert PosNegZero(21) == '21 e positivo'\n", "def test_case_40():\n    assert PosNegZero(41) == '41 e positivo'\n", "def test_case_41():\n    assert PosNegZero(76) == '76 e positivo'\n", "def test_case_42():\n    assert PosNegZero(-79) == '-79 e negativo'\n", "def test_case_43():\n    assert PosNegZero(64) == '64 e positivo'\n", "def test_case_44():\n    assert PosNegZero(-28) == '-28 e negativo'\n", "def test_case_45():\n    assert PosNegZero(-67) == '-67 e negativo'\n", "def test_case_46():\n    assert PosNegZero(-64) == '-64 e negativo'\n", "def test_case_47():\n    assert PosNegZero(49) == '49 e positivo'\n", "def test_case_48():\n    assert PosNegZero(0) == '0 e zero'\n", "def test_case_49():\n    assert PosNegZero(-27) == '-27 e negativo'\n", "def test_case_50():\n    assert PosNegZero(8) == '8 e positivo'\n", "def test_case_51():\n    assert PosNegZero(-43) == '-43 e negativo'\n"]])
    # data_array.append(["def classificacao(Cv: int, Ce: int, Cs: int, Fv: int, Fe: int, Fs: int) -> str:\n    if Cv * 3 + Ce > Fv * 3 + Fe:\n        return 'Cormengo'\n    if Cv * 3 + Ce < Fv * 3 + Fe:\n        return 'Flaminthians'\n    if Cs > Fs:\n        return 'Cormengo'\n    if Cs < Fs:\n        return 'Flaminthians'\n    return 'Empate'\n", "Dois times, Cormengo e Flaminthians, participam de um campeonato de futebol, juntamente com outros times. Cada vitória conta três pontos, cada empate um ponto. Fica melhor classificado no campeonato um time que tenha mais pontos. Em caso de empate no número de pontos, fica melhor classificado o time que tiver maior saldo de gols. Se o número de pontos e o saldo de gols forem os mesmos para os dois times então os dois times estão empatados no campeonato. Faça uma função definida por classificacao(Cv, Ce, Cs, Fv, Fe, Fs). Dados os números de vitórias e empates, e os saldos de gols dos dois times, sua tarefa é determinar qual dos dois está melhor classificado, ou se eles estão empatados no campeonato.Entrada: Os parâmetros de entrada da função são seis números inteiros C, Ce, Cs, F v, F e e F s, que são, respectivamente, o número de vitórias do Cormengo, o número de empates do Cormengo, o saldo de gols do Cormengo, o número de vitórias do Flaminthians, o número de empates do Flaminthians e o saldo de gols do Flaminthians. Saída: A sua fun¸ção deve retornar a string 'Cormengo', se Cormengo estiver melhor classificado que Flaminthians ou a string 'Flaminthians' , se Flaminthians estiver melhor classificado que Cormengo; e se os dois times estão empatados a função deve retornar 'Empate'. Exemplos: Entrada: 10,5,18,11,2,18 Saída: ’Empate’\nEntrada: 10,5,18,11,1,18 ; Saída: ’Cormengo’\nEntrada: 9,5,-1,10,2,10 Saída: ’Flaminthians’", "Tipos de dados, Strings, Estrutura Condicional", ["def test_case_1():\n    assert classificacao(9, 5, 6, 18, 5, 0) == 'Flaminthians'\n", "def test_case_2():\n    assert classificacao(5, 6, 6, 9, 19, 7) == 'Flaminthians'\n", "def test_case_3():\n    assert classificacao(9, 2, -3, 9, 2, -3) == 'Empate'\n", "def test_case_4():\n    assert classificacao(11, 13, -8, 10, 12, -9) == 'Cormengo'\n", "def test_case_5():\n    assert classificacao(19, 4, 4, 8, 7, 2) == 'Cormengo'\n", "def test_case_6():\n    assert classificacao(9, 17, 0, 13, 16, 6) == 'Flaminthians'\n", "def test_case_7():\n    assert classificacao(15, 2, 2, 11, 9, 7) == 'Cormengo'\n", "def test_case_8():\n    assert classificacao(18, 7, 9, 9, 6, -5) == 'Cormengo'\n", "def test_case_9():\n    assert classificacao(3, 16, -1, 18, 10, -2) == 'Flaminthians'\n", "def test_case_10():\n    assert classificacao(14, 15, -4, 7, 9, 5) == 'Cormengo'\n", "def test_case_11():\n    assert classificacao(16, 5, -5, 13, 3, -8) == 'Cormengo'\n", "def test_case_12():\n    assert classificacao(18, 6, 6, 2, 54, 6) == 'Empate'\n", "def test_case_13():\n    assert classificacao(16, 2, -2, 19, 3, -3) == 'Flaminthians'\n", "def test_case_14():\n    assert classificacao(6, 2, 6, 2, 14, 6) == 'Empate'\n", "def test_case_15():\n    assert classificacao(10, 19, -5, 8, 25, -9) == 'Cormengo'\n", "def test_case_16():\n    assert classificacao(18, 8, -3, 17, 11, 6) == 'Flaminthians'\n", "def test_case_17():\n    assert classificacao(16, 11, 6, 3, 5, -10) == 'Cormengo'\n", "def test_case_18():\n    assert classificacao(1, 12, 2, 10, 26, 2) == 'Flaminthians'\n", "def test_case_19():\n    assert classificacao(19, 2, -9, 3, 4, 8) == 'Cormengo'\n", "def test_case_20():\n    assert classificacao(17, 6, -2, 10, 27, 8) == 'Flaminthians'\n", "def test_case_21():\n    assert classificacao(16, 4, 6, 16, 4, 6) == 'Empate'\n", "def test_case_22():\n    assert classificacao(0, 27, -9, 2, 21, -9) == 'Empate'\n", "def test_case_23():\n    assert classificacao(12, 5, 9, 13, 2, 4) == 'Cormengo'\n", "def test_case_24():\n    assert classificacao(15, 14, -7, 17, 8, -7) == 'Empate'\n", "def test_case_25():\n    assert classificacao(15, 11, 2, 13, 17, -5) == 'Cormengo'\n", "def test_case_26():\n    assert classificacao(6, 8, -5, 8, 2, 9) == 'Flaminthians'\n", "def test_case_27():\n    assert classificacao(2, 28, -5, 12, 21, -8) == 'Flaminthians'\n", "def test_case_28():\n    assert classificacao(13, 5, -10, 5, 29, 9) == 'Flaminthians'\n", "def test_case_29():\n    assert classificacao(15, 15, 5, 7, 6, -9) == 'Cormengo'\n", "def test_case_30():\n    assert classificacao(2, 20, -9, 14, 5, 8) == 'Flaminthians'\n", "def test_case_31():\n    assert classificacao(14, 2, 0, 17, 14, 0) == 'Flaminthians'\n", "def test_case_32():\n    assert classificacao(18, 8, 6, 3, 11, -5) == 'Cormengo'\n", "def test_case_33():\n    assert classificacao(7, 23, 3, 9, 17, 3) == 'Empate'\n", "def test_case_34():\n    assert classificacao(10, 6, -6, 10, 2, 9) == 'Cormengo'\n", "def test_case_35():\n    assert classificacao(14, 4, 3, 15, 1, 3) == 'Empate'\n", "def test_case_36():\n    assert classificacao(7, 23, 4, 5, 13, 2) == 'Cormengo'\n", "def test_case_37():\n    assert classificacao(4, 19, 4, 6, 13, 4) == 'Empate'\n", "def test_case_38():\n    assert classificacao(5, 16, 2, 1, 10, 8) == 'Cormengo'\n", "def test_case_39():\n    assert classificacao(10, 18, 7, 9, 21, 7) == 'Empate'\n", "def test_case_40():\n    assert classificacao(8, 8, -8, 7, 11, -8) == 'Empate'\n", "def test_case_41():\n    assert classificacao(11, 5, 9, 16, 2, 7) == 'Flaminthians'\n", "def test_case_42():\n    assert classificacao(14, 12, 3, 13, 15, 3) == 'Empate'\n", "def test_case_43():\n    assert classificacao(1, 9, 0, 1, 11, -10) == 'Flaminthians'\n", "def test_case_44():\n    assert classificacao(16, 4, -3, 15, 7, -3) == 'Empate'\n", "def test_case_45():\n    assert classificacao(8, 8, -10, 13, 13, 4) == 'Flaminthians'\n", "def test_case_46():\n    assert classificacao(12, 18, 0, 11, 14, 8) == 'Cormengo'\n", "def test_case_47():\n    assert classificacao(18, 2, 0, 13, 17, 0) == 'Empate'\n", "def test_case_48():\n    assert classificacao(5, 5, 4, 3, 11, 9) == 'Flaminthians'\n", "def test_case_49():\n    assert classificacao(15, 1, -2, 11, 13, -2) == 'Empate'\n", "def test_case_50():\n    assert classificacao(6, 18, 9, 9, 9, 9) == 'Empate'\n"]])
    # data_array.append(["def avioes(competidores: int, quantidadePapel: int, quantidadeFolhas: int) -> str:\n    if quantidadePapel//(competidores*quantidadeFolhas) == 0:\n        return 'Insuficiente'\n    return 'Suficiente'\n", "Para descontrair os alunos após as provas da OBI, a Diretora da escola organizou um campeonato de aviões de papel. Cada aluno participante receberá uma certa quantidade de folhas de um papel especial para fazer os seus modelos de aviões. A quantidade de folhas que cada aluno deverá receber ainda não foi determinada: ela será decidida pelos juízes do campeonato. A diretora convidou, para atuarem como juízes, engenheiros da Embraer, uma das mais bem sucedidas empresas brasileiras, que vende aviões com tecnologia brasileira no mundo todo. O campeonato está programado para começar logo após a prova da OBI, mas os juízes ainda não chegaram à escola. A diretora está aflita, pois comprou uma boa quantidade de folhas de papel especial, mas não sabe se a quantidade comprada vai ser suficiente. Considere, por exemplo, que a Diretora comprou 100 folhas de papel especial, e que há 33 competidores. Se os juízes decidirem que cada competidor tem direito a três folhas de papel, a quantidade comprada pela diretora é suficiente. Mas se os juízes decidirem que cada competidor tem direito a quatro folhas, a quantidade comprada pela diretora não seria suficiente. Você deve escrever uma função definida por avioes(competidores, papel comprado, papel competidor) que, dados o número de competidores, o número de folhas de papel especial compradas pela Diretora e o número de folhas que cada competidor deve receber, determine se o número de folhas comprado pela Diretora é suficiente. Entrada: Os parâmetros de entrada da função são três números inteiros representando respectivamente o número de competidores, a quantidade de folhas de papel especial compradas pela Diretora e a quantidade de folhas de papel especial que cada competidor deve receber. Saída: A sua função deve retornar 'Suficiente' se a quantidade de folhas compradas pela Diretora for suficiente, ou 'Insuficiente' caso contrário. Exemplos: Entrada: 10,100,10 Saída: 'Suficiente'\nEntrada: 10,90,10Saída: 'Insuficiente'\nEntrada: 5,40,2Saída: 'Suficiente'", "Tipos de dados, Strings, Estrutura Condicional", ])
    
    # 04 - Variáveis e atribuição, strings e tuplas
    data_array.append(["def concatenacao(a: str, b: str) -> str:\n    return a + b + b + a\n", "Considere que a e b são duas strings à escolha do usuário. Faça uma função, chamada concatenacao, que retorne a concatenação delas no formato abba.", "Variáveis e atribuição, strings e tuplas", ["def test_case_1():\n    assert concatenacao('pintalgar', '') == 'pintalgarpintalgar'\n", "def test_case_2():\n    assert concatenacao('cirzo', 'Mark') == 'cirzoMarkMarkcirzo'\n", "def test_case_3():\n    assert concatenacao('duodecénio', 'somatotropas') == 'duodecéniosomatotropassomatotropasduodecénio'\n", "def test_case_4():\n    assert concatenacao('boateiro', 'anticolérico') == 'boateiroanticoléricoanticoléricoboateiro'\n", "def test_case_5():\n    assert concatenacao('alcatraz', 'gauchai') == 'alcatrazgauchaigauchaialcatraz'\n", "def test_case_6():\n    assert concatenacao('carcereiro', 'europeízem') == 'carcereiroeuropeízemeuropeízemcarcereiro'\n", "def test_case_7():\n    assert concatenacao('trajo', 'espaldar') == 'trajoespaldarespaldartrajo'\n", "def test_case_8():\n    assert concatenacao('Lérida', 'convêm') == 'LéridaconvêmconvêmLérida'\n", "def test_case_9():\n    assert concatenacao('panelada', ' ') == 'panelada  panelada'\n", "def test_case_10():\n    assert concatenacao('nevoeirada', 'predilecção') == 'nevoeiradapredilecçãopredilecçãonevoeirada'\n", "def test_case_11():\n    assert concatenacao('multimédia', 'subtractivo') == 'multimédiasubtractivosubtractivomultimédia'\n", "def test_case_12():\n    assert concatenacao('cobiçoso', 'penúltimo') == 'cobiçosopenúltimopenúltimocobiçoso'\n", "def test_case_13():\n    assert concatenacao('cólico', 'linguístico') == 'cólicolinguísticolinguísticocólico'\n", "def test_case_14():\n    assert concatenacao('caleira', 'fanático') == 'caleirafanáticofanáticocaleira'\n", "def test_case_15():\n    assert concatenacao('persecução', 'esticanço') == 'persecuçãoesticançoesticançopersecução'\n", "def test_case_16():\n    assert concatenacao('crápula', 'generante') == 'crápulagenerantegenerantecrápula'\n", "def test_case_17():\n    assert concatenacao(' ', 'musicologia') == ' musicologiamusicologia '\n", "def test_case_18():\n    assert concatenacao('', 'segue') == 'seguesegue'\n", "def test_case_19():\n    assert concatenacao('lamentar', 'Lérida') == 'lamentarLéridaLéridalamentar'\n", "def test_case_20():\n    assert concatenacao('somatotropas', 'repelir') == 'somatotropasrepelirrepelirsomatotropas'\n", "def test_case_21():\n    assert concatenacao('sustivéreis', 'caleira') == 'sustivéreiscaleiracaleirasustivéreis'\n", "def test_case_22():\n    assert concatenacao('arborista', 'sigilar') == 'arboristasigilarsigilararborista'\n"]])
    data_array.append(["def substitui(s: str,x: str,i: int) -> str:\n    if i < 0 or i >= len(s):\n        return 'i inválido'\n    return s[:i] + x + s[i+1:]\n", "Escreva uma função definida por substitui(s, x, i) que receba uma string s, um caractere x e um número inteiro i  entre 0 e o comprimento da string, e retorne uma string igual a s, exceto que o elemento da posição i  deve ser substituído pelo caractere x.", "Variáveis e atribuição, strings e tuplas", ["def test_case_1():\n    assert substitui('pintalgar', 'x', 2) == 'pixtalgar'\n", "def test_case_2():\n    assert substitui('crestar', 'l', 4) == 'creslar'\n", "def test_case_3():\n    assert substitui('anticolérico', 'j', 11) == 'anticoléricj'\n", "def test_case_4():\n    assert substitui('repelir', 't', 1) == 'rtpelir'\n", "def test_case_5():\n    assert substitui('intravável', 'x', 5) == 'intraxável'\n", "def test_case_6():\n    assert substitui('bit', 'j', 0) == 'jit'\n", "def test_case_7():\n    assert substitui('saberdes', 'e', 5) == 'saberees'\n", "def test_case_8():\n    assert substitui('fanático', 'x', 7) == 'fanáticx'\n", "def test_case_9():\n    assert substitui('vagão', 'e', 3) == 'vageo'\n", "def test_case_10():\n    assert substitui('somatotropas', 'l', 6) == 'somatolropas'\n", "def test_case_11():\n    assert substitui('convêm', 'v', 3) == 'convêm'\n", "def test_case_12():\n    assert substitui('gauchai', 'v', 3) == 'gauvhai'\n", "def test_case_13():\n    assert substitui('alcatraz', 'l', 7) == 'alcatral'\n", "def test_case_14():\n    assert substitui('dúbio', 't', 2) == 'dútio'\n", "def test_case_15():\n    assert substitui('humildade', 'y', 5) == 'humilyade'\n", "def test_case_16():\n    assert substitui('voraz', 'k', 3) == 'vorkz'\n", "def test_case_17():\n    assert substitui('cabular', 'c', 3) == 'cabclar'\n", "def test_case_18():\n    assert substitui('equitativo', 'i', 7) == 'equitativo'\n", "def test_case_19():\n    assert substitui('entretendo', 'k', 7) == 'entretekdo'\n", "def test_case_20():\n    assert substitui('amoladura', 'u', 4) == 'amoludura'\n", "def test_case_21():\n    assert substitui('escorrer', 'i', 7) == 'escorrei'\n", "def test_case_22():\n    assert substitui('arborista', 'p', 1) == 'apborista'\n", "def test_case_23():\n    assert substitui('boateiro', 'g', 6) == 'boateigo'\n", "def test_case_24():\n    assert substitui('filonianos', 'b', 9) == 'filonianob'\n", "def test_case_25():\n    assert substitui('trajo', 'f', 4) == 'trajf'\n", "def test_case_26():\n    assert substitui('ressentir', 'p', 4) == 'resspntir'\n", "def test_case_27():\n    assert substitui('intercelular', 'c', 11) == 'intercelulac'\n", "def test_case_28():\n    assert substitui('persecução', 'w', 9) == 'persecuçãw'\n", "def test_case_29():\n    assert substitui('sustiveram', 'o', 0) == 'oustiveram'\n", "def test_case_30():\n    assert substitui('arpear', 'o', 2) == 'aroear'\n", "def test_case_31():\n    assert substitui('drogaria', 'f', 5) == 'drogafia'\n", "def test_case_32():\n    assert substitui('duodecénio', 't', 2) == 'dutdecénio'\n", "def test_case_33():\n    assert substitui('penúltimo', 'w', 4) == 'penúwtimo'\n", "def test_case_34():\n    assert substitui('adviéreis', 'l', 1) == 'alviéreis'\n", "def test_case_35():\n    assert substitui('Kennedy', 'g', 2) == 'Kegnedy'\n", "def test_case_36():\n    assert substitui('lamentar', 'g', 3) == 'lamgntar'\n", "def test_case_37():\n    assert substitui('imperturbado', 'w', 1) == 'iwperturbado'\n", "def test_case_38():\n    assert substitui('higienizar', 'j', 4) == 'higijnizar'\n", "def test_case_39():\n    assert substitui('terreno', 'z', 6) == 'terrenz'\n", "def test_case_40():\n    assert substitui('cólico', 't', 5) == 'cólict'\n", "def test_case_41():\n    assert substitui('vivificativo', 'c', 0) == 'civificativo'\n", "def test_case_42():\n    assert substitui('segue', 'q', 3) == 'segqe'\n", "def test_case_43():\n    assert substitui('paludismo', 'c', 7) == 'paludisco'\n", "def test_case_44():\n    assert substitui('multimédia', 'i', 2) == 'muitimédia'\n", "def test_case_45():\n    assert substitui('cacheiro', 'u', 1) == 'cucheiro'\n", "def test_case_46():\n    assert substitui('inclusão', 'p', 6) == 'incluspo'\n", "def test_case_47():\n    assert substitui('lixoso', 'x', 4) == 'lixoxo'\n", "def test_case_48():\n    assert substitui('luso', 'k', 2) == 'luko'\n", "def test_case_49():\n    assert substitui('confessor', 'x', 4) == 'confxssor'\n", "def test_case_50():\n    assert substitui('divindade', 'i', 8) == 'divindadi'\n", "def test_case_51():\n    assert substitui('borbulhento', 'r', 6) == 'borbulrento'\n", "def test_case_52():\n    assert substitui('particularista', 'l', 2) == 'palticularista'\n", "def test_case_53():\n    assert substitui('sigilar', 'w', 6) == 'sigilaw'\n", "def test_case_54():\n    assert substitui('matutar', 'u', 6) == 'matutau'\n", "def test_case_55():\n    assert substitui('regresso', 'm', 6) == 'regresmo'\n", "def test_case_56():\n    assert substitui('generante', 'l', 0) == 'lenerante'\n", "def test_case_57():\n    assert substitui('caleira', 's', 0) == 'saleira'\n", "def test_case_58():\n    assert substitui('cirzo', 's', 2) == 'ciszo'\n", "def test_case_59():\n    assert substitui('nevoeirada', 'l', 6) == 'nevoeilada'\n", "def test_case_60():\n    assert substitui('delirar', 'f', 1) == 'dflirar'\n", "def test_case_61():\n    assert substitui('previne', 'h', 2) == 'prhvine'\n", "def test_case_62():\n    assert substitui('Mussolini', 'h', 3) == 'Musholini'\n", "def test_case_63():\n    assert substitui('Mark', 'l', 2) == 'Malk'\n", "def test_case_64():\n    assert substitui('sustivéreis', 'h', 4) == 'susthvéreis'\n", "def test_case_65():\n    assert substitui('exultar', 'u', 0) == 'uxultar'\n", "def test_case_66():\n    assert substitui('advirdes', 'b', 6) == 'advirdbs'\n", "def test_case_67():\n    assert substitui('traziam', 'e', 3) == 'traeiam'\n", "def test_case_68():\n    assert substitui('sagaz', 'b', 1) == 'sbgaz'\n", "def test_case_69():\n    assert substitui('cagaçal', 'i', 1) == 'cigaçal'\n", "def test_case_70():\n    assert substitui('linguístico', 't', 0) == 'tinguístico'\n", "def test_case_71():\n    assert substitui('espaldar', 'x', 1) == 'expaldar'\n", "def test_case_72():\n    assert substitui('Lérida', 'f', 4) == 'Lérifa'\n", "def test_case_73():\n    assert substitui('aborto', 'o', 0) == 'oborto'\n", "def test_case_74():\n    assert substitui('troçar', 'f', 3) == 'trofar'\n", "def test_case_75():\n    assert substitui('carcereiro', 'g', 4) == 'carcgreiro'\n", "def test_case_76():\n    assert substitui('europeízem', 'q', 5) == 'europqízem'\n", "def test_case_77():\n    assert substitui('ogivado', 's', 3) == 'ogisado'\n", "def test_case_78():\n    assert substitui('sorrir', 'o', 1) == 'sorrir'\n", "def test_case_79():\n    assert substitui('musicologia', 'k', 4) == 'musikologia'\n", "def test_case_80():\n    assert substitui('subtractivo', 'd', 2) == 'sudtractivo'\n", "def test_case_81():\n    assert substitui('famigerado', 'p', 4) == 'famiperado'\n", "def test_case_82():\n    assert substitui('panelada', 'd', 4) == 'panedada'\n", "def test_case_83():\n    assert substitui('festinhas', 'i', 3) == 'fesiinhas'\n", "def test_case_84():\n    assert substitui('esticanço', 'y', 6) == 'esticayço'\n", "def test_case_85():\n    assert substitui('atomismo', 'o', 7) == 'atomismo'\n", "def test_case_86():\n    assert substitui('cobiçoso', 's', 2) == 'cosiçoso'\n", "def test_case_87():\n    assert substitui('virginalizar', 'g', 4) == 'virggnalizar'\n", "def test_case_88():\n    assert substitui('candelabro', 'b', 4) == 'candblabro'\n", "def test_case_89():\n    assert substitui('barão', 'q', 2) == 'baqão'\n", "def test_case_90():\n    assert substitui('crápula', 'g', 2) == 'crgpula'\n", "def test_case_91():\n    assert substitui('séquito', 's', 5) == 'séquiso'\n", "def test_case_92():\n    assert substitui('predilecção', 'n', 9) == 'predilecçno'\n", "def test_case_93():\n    assert substitui('isotónico', 'a', 2) == 'isatónico'\n", "def test_case_94():\n    assert substitui('Schiller', 'k', 0) == 'kchiller'\n", "def test_case_95():\n    assert substitui(' ', 'x', 0) == 'x'\n", "def test_case_96():\n    assert substitui('dragagem', 'o', 5) == 'dragaoem'\n", "def test_case_97():\n    assert substitui('centro', 'i', 1) == 'cintro'\n", "def test_case_98():\n    assert substitui('OGMA', 'z', 2) == 'OGzA'\n", "def test_case_99():\n    assert substitui('destingir', 'o', 8) == 'destingio'\n", "def test_case_100():\n    assert substitui('delínquo', 'o', 2) == 'deoínquo'\n"]])
    data_array.append(["def hashtag(string: str) -> str:\n    pos = len(string)//2\n    return '#' + string[:pos] + '#' + string[pos:] + '#'\n", "Escreva uma função chamada hashtag que receba uma string e insira o caractere ”#” no início, no meio e no final dela. Por exemplo, se a entrada for ”abcd”, a saída deve ser ”#ab#cd#”. Outro exemplo: se receber ”abcde”, a função deve retornar ”#ab#cde#”.", "Variáveis e atribuição, strings e tuplas", ["def test_case_1():\n    assert hashtag('drogaria') == '#drog#aria#'\n", "def test_case_2():\n    assert hashtag('bit') == '#b#it#'\n", "def test_case_3():\n    assert hashtag('troçar') == '#tro#çar#'\n", "def test_case_4():\n    assert hashtag('inclusão') == '#incl#usão#'\n", "def test_case_5():\n    assert hashtag('cobiçoso') == '#cobi#çoso#'\n", "def test_case_6():\n    assert hashtag('musicologia') == '#music#ologia#'\n", "def test_case_7():\n    assert hashtag('delínquo') == '#delí#nquo#'\n", "def test_case_8():\n    assert hashtag('carcereiro') == '#carce#reiro#'\n", "def test_case_9():\n    assert hashtag('europeízem') == '#europ#eízem#'\n", "def test_case_10():\n    assert hashtag('sustivéreis') == '#susti#véreis#'\n", "def test_case_11():\n    assert hashtag('traziam') == '#tra#ziam#'\n", "def test_case_12():\n    assert hashtag('virginalizar') == '#virgin#alizar#'\n", "def test_case_13():\n    assert hashtag('sorrir') == '#sor#rir#'\n", "def test_case_14():\n    assert hashtag('candelabro') == '#cande#labro#'\n", "def test_case_15():\n    assert hashtag('arborista') == '#arbo#rista#'\n", "def test_case_16():\n    assert hashtag('adviéreis') == '#advi#éreis#'\n", "def test_case_17():\n    assert hashtag('ressentir') == '#ress#entir#'\n", "def test_case_18():\n    assert hashtag('festinhas') == '#fest#inhas#'\n", "def test_case_19():\n    assert hashtag('atomismo') == '#atom#ismo#'\n", "def test_case_20():\n    assert hashtag('lamentar') == '#lame#ntar#'\n", "def test_case_21():\n    assert hashtag('anticolérico') == '#antico#lérico#'\n", "def test_case_22():\n    assert hashtag('boateiro') == '#boat#eiro#'\n", "def test_case_23():\n    assert hashtag('sagaz') == '#sa#gaz#'\n", "def test_case_24():\n    assert hashtag('trajo') == '#tr#ajo#'\n", "def test_case_25():\n    assert hashtag('arpear') == '#arp#ear#'\n", "def test_case_26():\n    assert hashtag('repelir') == '#rep#elir#'\n", "def test_case_27():\n    assert hashtag('crestar') == '#cre#star#'\n", "def test_case_28():\n    assert hashtag('espaldar') == '#espa#ldar#'\n", "def test_case_29():\n    assert hashtag('convêm') == '#con#vêm#'\n", "def test_case_30():\n    assert hashtag('intercelular') == '#interc#elular#'\n", "def test_case_31():\n    assert hashtag('borbulhento') == '#borbu#lhento#'\n", "def test_case_32():\n    assert hashtag('cirzo') == '#ci#rzo#'\n", "def test_case_33():\n    assert hashtag('nevoeirada') == '#nevoe#irada#'\n", "def test_case_34():\n    assert hashtag('equitativo') == '#equit#ativo#'\n", "def test_case_35():\n    assert hashtag('segue') == '#se#gue#'\n", "def test_case_36():\n    assert hashtag('exultar') == '#exu#ltar#'\n", "def test_case_37():\n    assert hashtag('a') == '##a#'\n", "def test_case_38():\n    assert hashtag('ogivado') == '#ogi#vado#'\n", "def test_case_39():\n    assert hashtag('famigerado') == '#famig#erado#'\n", "def test_case_40():\n    assert hashtag('confessor') == '#conf#essor#'\n", "def test_case_41():\n    assert hashtag('particularista') == '#particu#larista#'\n", "def test_case_42():\n    assert hashtag('somatotropas') == '#somato#tropas#'\n", "def test_case_43():\n    assert hashtag('esticanço') == '#esti#canço#'\n", "def test_case_44():\n    assert hashtag('centro') == '#cen#tro#'\n", "def test_case_45():\n    assert hashtag('persecução') == '#perse#cução#'\n", "def test_case_46():\n    assert hashtag('delirar') == '#del#irar#'\n", "def test_case_47():\n    assert hashtag('Mark') == '#Ma#rk#'\n", "def test_case_48():\n    assert hashtag('dragagem') == '#drag#agem#'\n", "def test_case_49():\n    assert hashtag('paludismo') == '#palu#dismo#'\n", "def test_case_50():\n    assert hashtag('escorrer') == '#esco#rrer#'\n", "def test_case_51():\n    assert hashtag('gauchai') == '#gau#chai#'\n", "def test_case_52():\n    assert hashtag('lixoso') == '#lix#oso#'\n", "def test_case_53():\n    assert hashtag('generante') == '#gene#rante#'\n", "def test_case_54():\n    assert hashtag('panelada') == '#pane#lada#'\n", "def test_case_55():\n    assert hashtag('voraz') == '#vo#raz#'\n", "def test_case_56():\n    assert hashtag('humildade') == '#humi#ldade#'\n", "def test_case_57():\n    assert hashtag('multimédia') == '#multi#média#'\n", "def test_case_58():\n    assert hashtag('aborto') == '#abo#rto#'\n", "def test_case_59():\n    assert hashtag('Lérida') == '#Lér#ida#'\n", "def test_case_60():\n    assert hashtag('regresso') == '#regr#esso#'\n", "def test_case_61():\n    assert hashtag('isotónico') == '#isot#ónico#'\n", "def test_case_62():\n    assert hashtag('alcatraz') == '#alca#traz#'\n", "def test_case_63():\n    assert hashtag('vivificativo') == '#vivifi#cativo#'\n", "def test_case_64():\n    assert hashtag('cabular') == '#cab#ular#'\n", "def test_case_65():\n    assert hashtag('séquito') == '#séq#uito#'\n", "def test_case_66():\n    assert hashtag('entretendo') == '#entre#tendo#'\n", "def test_case_67():\n    assert hashtag('cólico') == '#cól#ico#'\n", "def test_case_68():\n    assert hashtag('fanático') == '#faná#tico#'\n", "def test_case_69():\n    assert hashtag('intravável') == '#intra#vável#'\n", "def test_case_70():\n    assert hashtag('pintalgar') == '#pint#algar#'\n", "def test_case_71():\n    assert hashtag('vagão') == '#va#gão#'\n", "def test_case_72():\n    assert hashtag('predilecção') == '#predi#lecção#'\n", "def test_case_73():\n    assert hashtag('higienizar') == '#higie#nizar#'\n", "def test_case_74():\n    assert hashtag('crápula') == '#crá#pula#'\n", "def test_case_75():\n    assert hashtag('barão') == '#ba#rão#'\n", "def test_case_76():\n    assert hashtag('sustiveram') == '#susti#veram#'\n", "def test_case_77():\n    assert hashtag('sigilar') == '#sig#ilar#'\n", "def test_case_78():\n    assert hashtag('filonianos') == '#filon#ianos#'\n", "def test_case_79():\n    assert hashtag('Schiller') == '#Schi#ller#'\n", "def test_case_80():\n    assert hashtag('cacheiro') == '#cach#eiro#'\n", "def test_case_81():\n    assert hashtag('advirdes') == '#advi#rdes#'\n", "def test_case_82():\n    assert hashtag('OGMA') == '#OG#MA#'\n", "def test_case_83():\n    assert hashtag('luso') == '#lu#so#'\n", "def test_case_84():\n    assert hashtag('divindade') == '#divi#ndade#'\n", "def test_case_85():\n    assert hashtag('') == '###'\n", "def test_case_86():\n    assert hashtag('Kennedy') == '#Ken#nedy#'\n", "def test_case_87():\n    assert hashtag('imperturbado') == '#impert#urbado#'\n", "def test_case_88():\n    assert hashtag('caleira') == '#cal#eira#'\n", "def test_case_89():\n    assert hashtag('destingir') == '#dest#ingir#'\n", "def test_case_90():\n    assert hashtag('penúltimo') == '#penú#ltimo#'\n", "def test_case_91():\n    assert hashtag('amoladura') == '#amol#adura#'\n", "def test_case_92():\n    assert hashtag('saberdes') == '#sabe#rdes#'\n", "def test_case_93():\n    assert hashtag('Mussolini') == '#Muss#olini#'\n", "def test_case_94():\n    assert hashtag('cagaçal') == '#cag#açal#'\n", "def test_case_95():\n    assert hashtag('duodecénio') == '#duode#cénio#'\n", "def test_case_96():\n    assert hashtag('terreno') == '#ter#reno#'\n", "def test_case_97():\n    assert hashtag('matutar') == '#mat#utar#'\n", "def test_case_98():\n    assert hashtag('linguístico') == '#lingu#ístico#'\n", "def test_case_99():\n    assert hashtag('subtractivo') == '#subtr#activo#'\n", "def test_case_100():\n    assert hashtag('previne') == '#pre#vine#'\n", "def test_case_101():\n    assert hashtag('dúbio') == '#dú#bio#'\n"]])
    data_array.append(["def filtra_pares(t: list[int]):\n    pares = ()\n    if t[0]%2 == 0:\n        pares = pares + (t[0],)\n    if t[1]%2 == 0:\n        pares = pares + (t[1],)\n    if t[2]%2 == 0:\n        pares = pares + (t[2],)\n    if t[3]%2 == 0:\n        pares = pares + (t[3],)\n    return pares\n", "Faça uma função chamada filtra_pares que receba uma tupla com quatro elementos inteiros como parâmetro, e retorne uma nova tupla contendo apenas os elementos pares da tupla original, na mesma ordem em que se encontravam. Esse tipo de operação onde se selecionam elementos de um conjunto inicial que satisfazem uma determinada propriedade é bastante comum em computação, e se chama filtragem.", "Variáveis e atribuição, strings e tuplas", ['def test_case_1():\n    assert filtra_pares([147, 613, 609, 267]) == ()\n', 'def test_case_2():\n    assert filtra_pares([916, 123, 417, 627]) == (916,)\n', 'def test_case_3():\n    assert filtra_pares([146, 563, 249, 270]) == (146, 270)\n', 'def test_case_4():\n    assert filtra_pares([575, 641, 851, 707]) == ()\n', 'def test_case_5():\n    assert filtra_pares([929, 215, 308, 903]) == (308,)\n', 'def test_case_6():\n    assert filtra_pares([628, 885, 14, 34]) == (628, 14, 34)\n', 'def test_case_7():\n    assert filtra_pares([878, -47, 465, 319]) == (878,)\n', 'def test_case_8():\n    assert filtra_pares([37, 705, 599, 636]) == (636,)\n', 'def test_case_9():\n    assert filtra_pares([-40, 698, 538, 408]) == (-40, 698, 538, 408)\n', 'def test_case_10():\n    assert filtra_pares([991, 775, 5, 394]) == (394,)\n', 'def test_case_11():\n    assert filtra_pares([945, 74, 205, 654]) == (74, 654)\n', 'def test_case_12():\n    assert filtra_pares([207, 369, -5, 812]) == (812,)\n']])
    data_array.append(["def colisao(ret1: tuple[int, int], ret2: tuple[int, int]) -> bool:\n    x_esq1, y_inf1, x_dir1, y_sup1 = ret1\n    x_esq2, y_inf2, x_dir2, y_sup2 = ret2\n    if x_dir2 < x_esq1 or x_dir1 < x_esq2:\n        return False\n    if y_sup2 < y_inf1 or y_sup1 < y_inf2:\n        return False\n    return True\n", "Detecção de colisão é uma das operações mais comuns (e importantes) em jogos eletrônicos. O objetivo, basicamente, é verificar se dois objetos quaisquer colidiram, ou seja, se a interseção entre eles é diferente de vazio. Isso pode ser usado para saber se duas naves colidiram, se um monstro bateu numa parede, se um personagem pegou um item, etc.Para facilitar as coisas, muitas vezes os objetos são aproximados por figuras geométricas simples (esferas, paralelepípedos, triângulos etc). Neste problema, os objetos são aproximados por retângulos num plano 2D. Escreva uma função chamada colisao que, dados dois retângulos, determine se eles se interceptam ou não. Cada retângulo é determinado pelas coordenadas x e y de dois de seus vértices diametralmente opostos,  representando a diagonal que vai da esquerda para a direita e de baixo para cima. Os lados de cada retângulo são sempre paralelos aos eixos x e y.Entrada: Os parâmetros de entrada são duas tuplas com quatro valores inteiros cada uma, representando as coordenadas do primeiro retângulo e as coordenadas do segundo retângulo. Saída: A sua função deve retornar o valor booleano True caso haja interseção ou False, caso não haja. ExemplosEntrada: (0,0,1,1), (0,0,1,1) ; Saída: True\nEntrada: (0,0,2,2), (1,1,3,3) ; Saída: True\nEntrada: (0,0,1,1), (2,2,3,3) ; Saída: False", "Variáveis e atribuição, strings e tuplas", ['def test_case_1():\n    assert colisao([6, 5, 8, 7], [6, 2, 7, 5]) == True\n', 'def test_case_2():\n    assert colisao([4, 8, 9, 9], [2, 1, 9, 5]) == False\n', 'def test_case_3():\n    assert colisao([5, 5, 7, 7], [6, 3, 8, 8]) == True\n', 'def test_case_4():\n    assert colisao([1, 5, 4, 8], [5, 6, 8, 9]) == False\n', 'def test_case_5():\n    assert colisao([1, 4, 9, 7], [8, 7, 9, 8]) == True\n']])
    
    # 05 - Manipulação de strings, tuplas e listas
    data_array.append(["def quant_palavras(frase: str) -> int:\n    frase = str.strip(frase)\n    totalEspacos = frase.count(' ')\n    return totalEspacos + 1\n", "Faça uma função definida por quant_palavras(frase) que dada uma frase, retorne o número de palavras da frase. Considere que a frase pode ter espaços no início e no final.", "Manipulação de strings, tuplas e listas", ["def test_case_1():\n    assert quant_palavras('Mas, não tendo ela rudimento algum de arte, e havendo feito aquilo de memória em poucos minutos, achei que era obra de muito merecimento; descontai-me a idade e a simpatia.') == 30\n", "def test_case_2():\n    assert quant_palavras('Eram de vária espécie, explicáveis e inexplicáveis, assim úteis como inúteis, umas graves, outras frívolas; gostava de saber tudo.') == 19\n", "def test_case_3():\n    assert quant_palavras('Foi pelas festas da Coroação.') == 5\n", "def test_case_4():\n    assert quant_palavras('Capitu confessou-me um dia que esta razão acendeu nela o desejo de o saber.') == 14\n", "def test_case_5():\n    assert quant_palavras('Está na sala, penteando o cabelo, disse-me; vá devagarzinho para lhe pregar um susto.') == 14\n"]])
    data_array.append(["def conta_frases(texto: str) -> int:\n    return str.count(texto,\"?\")+str.count(texto,\"!\")+str.count(texto,\".\")-2*str.count(texto,\"...\")\n", "Dado um texto armazenado em uma string, faça a função conta_frases que conte o número de frases que aparecem neste texto. Cada frase no texto é terminada com um ponto final, um ponto de exclamação, um ponto de interrogação ou três pontos em sequência (reticências). Pontos de exclamação ou de interrogação não aparecerão repetidos em sequência no texto e esses símbolos só aparecem no texto terminando uma frase. No exemplo a seguir, são contadas 4 frases: “Preciso tirar um cochilo. Meus Deus! Que horas são? Vou perder a minha aula…”", "Manipulação de strings, tuplas e listas", ["def test_case_1():\n    assert conta_frases('Preciso tirar um cochilo. Meus Deus! Que horas são? Vou perder a minha aula...') == 4\n", "def test_case_2():\n    assert conta_frases('As curiosidades de Capitu dão para um capítulo. Eram de vária espécie, explicáveis e inexplicáveis, assim úteis como inúteis, umas graves, outras frívolas; gostava de saber tudo.') == 2\n", "def test_case_3():\n    assert conta_frases('No colégio onde, desde os sete anos, aprendera a ler, escrever e contar, francês, doutrina e obras de agulha, não aprendeu, por exemplo, a fazer renda; por isso mesmo, quis que prima Justina lhe ensinasse. Se não estudou latim com o Padre Cabral foi porque o padre, depois de lhe propor gracejando, acabou dizendo que latim não era língua de meninas. Capitu confessou-me um dia que esta razão acendeu nela o desejo de o saber. Em compensação, quis aprender inglês com um velho professor amigo do pai e parceiro deste ao solo, mas não foi adiante.') == 4\n", "def test_case_4():\n    assert conta_frases('Tio Cosme ensinou-lhe gamão. Anda apanhar um capotinho, Capitu, dizia-lhe ele. Capitu obedecia e jogava com facilidade, com atenção, não sei se diga com amor.') == 3\n", "def test_case_5():\n    assert conta_frases('Um dia fui achá-la desenhando a lápis um retrato; dava os últimos rasgos, e pediu-me que esperasse para ver se estava parecido. Era o de meu pai, copiado da tela que minha mãe tinha na sala e que ainda agora está comigo. Perfeição não era; ao contrário, os olhos saíram esbugalhados, e os cabelos eram pequenos círculos uns sobre outros.') == 3\n", "def test_case_6():\n    assert conta_frases('Mas, não tendo ela rudimento algum de arte, e havendo feito aquilo de memória em poucos minutos, achei que era obra de muito merecimento; descontai-me a idade e a simpatia. Ainda assim, estou que aprenderia facilmente pintura, como aprendeu música mais tarde... Já então namorava o piano da nossa casa, velho traste inútil, apenas de estimação... Lia os nossos romances, folheava os nossos livros de gravuras, querendo saber das ruínas, das pessoas, das campanhas, o nome, a história, o lugar.') == 4\n", "def test_case_7():\n    assert conta_frases('José Dias dava-lhe essas notícias com certo orgulho de erudito. A erudição deste não avultava muito mais que a sua homeopatia de Cantagalo. Um dia, Capitu quis saber o que eram as figuras da sala de visitas. O agregado disse-lho sumariamente, demorando-se um pouco mais em César, com exclamações e latins:   César! Júlio César! Grande homem! Tu quoque, Brute? Capitu não achava bonito o perfil de César, mas as ações citadas por José Dias davam-lhe gestos de admiração.') == 8\n", "def test_case_8():\n    assert conta_frases('Ficou muito tempo com a cara virada para ele. Um homem que podia tudo! que fazia tudo! Um homem que dava a uma senhora uma pérola do valor de seis milhões de sestércios!') == 4\n", "def test_case_9():\n    assert conta_frases('E quanto valia cada sestércio?') == 1\n", "def test_case_10():\n    assert conta_frases('José Dias, não tendo presente o valor do sestércio, respondeu entusiasmado:   É o maior homem da história!') == 1\n", "def test_case_11():\n    assert conta_frases('A pérola de César acendia os olhos de Capitu. Foi nessa ocasião que ela perguntou a minha mãe por que é que já não usava as jóias do retrato; referia-se ao que estava na sala, com o de meu pai; tinha um grande colar, um diadema e brincos.') == 2\n", "def test_case_12():\n    assert conta_frases('São jóias viúvas, como eu, Capitu. Quando é que botou estas?') == 2\n", "def test_case_13():\n    assert conta_frases('Foi pelas festas da Coroação. Oh! conte-me as festas da Coroação!') == 3\n", "def test_case_14():\n    assert conta_frases('Sabia já o que os pais lhe haviam dito, mas naturalmente tinha para si que eles pouco mais conheceriam do que o que se passou nas ruas.') == 1\n", "def test_case_15():\n    assert conta_frases('Queria a notícia das tribunas da Capela Imperial e dos salões dos bailes.') == 1\n", "def test_case_16():\n    assert conta_frases('Nascera muito depois daquelas festas célebres.') == 1\n", "def test_case_17():\n    assert conta_frases('Ouvindo falar várias vezes da Maioridade, teimou um dia em saber o que fora este acontecimento; disseram-lho, e achou que o Imperador fizera muito bem em querer subir ao trono aos quinze anos.') == 1\n", "def test_case_18():\n    assert conta_frases('Tudo era matéria às curiosidades de Capitu, mobílias antigas, alfaias velhas, costumes, notícias de Itaguaí, a infância e a mocidade de minha mãe, um dito daqui, uma lembrança dali, um adágio dacolá...') == 1\n", "def test_case_19():\n    assert conta_frases('CAPÍTULO XXXII  OLHOS DE RESSACA  Tudo era matéria às curiosidades de Capitu.') == 1\n", "def test_case_20():\n    assert conta_frases('Caso houve, porém, no qual não sei se aprendeu ou ensinou, ou se fez ambas as coisas, como eu.') == 1\n", "def test_case_21():\n    assert conta_frases('É o que contarei no outro capítulo.') == 1\n", "def test_case_22():\n    assert conta_frases('Neste direi somente que, passados alguns dias do ajuste com o agregado, fui ver a minha amiga; eram dez horas da manhã.') == 1\n", "def test_case_23():\n    assert conta_frases('D. Fortunata, que estava no quintal, nem esperou que eu lhe perguntasse pela filha. Está na sala, penteando o cabelo, disse-me; vá devagarzinho para lhe pregar um susto.') == 3\n", "def test_case_24():\n    assert conta_frases('Fui devagar, mas ou o pé ou o espelho traiu-me. Este pode ser que não fosse; era um espelhinho de pataca (perdoai a barateza), comprado a um mascate italiano, moldura tosca, argolinha de latão, pendente da parede, entre as duas janelas.') == 2\n"]])
    data_array.append(["def intercala(lista1: List[int],lista2: List[int]) -> List[int]:\n    lista3 = 6*[0]\n    lista3[::2] = lista1\n    lista3[1::2] = lista2\n    return lista3\n", "Faça uma função chamada definida por **\\`intercala(lista1, lista2)\\`** que dadas duas listas L1 e L2 de tamanho 3, gera uma lista L3 que é formada intercalando os elementos de L1 e L2. \n\n\n\nExemplo:\n\nL1 = [1, 3, 5] e L2 = [2, 4, 6] gera L3 = [1, 2, 3, 4, 5, 6].", "Listas e Dicionários", ['def test_case_1():\n    assert intercala([6, 2, 7], [5, 9, 1]) == [6, 5, 2, 9, 7, 1]\n', 'def test_case_2():\n    assert intercala([4, 2, 3], [6, 2, 5]) == [4, 6, 2, 2, 3, 5]\n', 'def test_case_3():\n    assert intercala([7, 6, 4], [5, 2, 0]) == [7, 5, 6, 2, 4, 0]\n', 'def test_case_4():\n    assert intercala([9, 4, 7], [4, 9, 6]) == [9, 4, 4, 9, 7, 6]\n', 'def test_case_5():\n    assert intercala([4, 5, 8], [1, 7, 9]) == [4, 1, 5, 7, 8, 9]\n', 'def test_case_6():\n    assert intercala([6, 9, 5], [9, 1, 3]) == [6, 9, 9, 1, 5, 3]\n', 'def test_case_7():\n    assert intercala([1, 2, 6], [2, 0, 3]) == [1, 2, 2, 0, 6, 3]\n', 'def test_case_8():\n    assert intercala([9, 4, 3], [2, 6, 0]) == [9, 2, 4, 6, 3, 0]\n', 'def test_case_9():\n    assert intercala([8, 7, 4], [7, 6, 9]) == [8, 7, 7, 6, 4, 9]\n', 'def test_case_10():\n    assert intercala([3, 6, 1], [4, 9, 3]) == [3, 4, 6, 9, 1, 3]\n']])
    data_array.append(["def retira_pontuacao(frase: str) -> str:\n    sem_pontos = str.replace(str.replace(str.replace(frase,\",\",\" \"),\".\",\" \"),\"...\",\" \")\n    sem_pontos2= str.replace(str.replace(str.replace(sem_pontos,\"!\",\" \"),\"?\",\" \"),\";\",\" \")\n    return str.replace(str.replace(sem_pontos2, \":\", \" \"), \"-\",\" \")\n", "Faça uma função retira_pontuacao que, dada uma frase, retorne a frase onde todos os caracteres de pontuação (incluindo travessão, vírgula, dois pontos, ponto e vírgula, além da pontuação de encerramento de frase) tenham sido substituídos por espaço.", "Manipulação de strings, tuplas e listas", ["def test_case_1():\n    assert retira_pontuacao('Anda apanhar um capotinho, Capitu, dizia-lhe ele.') == 'Anda apanhar um capotinho  Capitu  dizia lhe ele '\n", "def test_case_2():\n    assert retira_pontuacao('São jóias viúvas, como eu, Capitu.') == 'São jóias viúvas  como eu  Capitu '\n", "def test_case_3():\n    assert retira_pontuacao('Quando é que botou estas?') == 'Quando é que botou estas '\n", "def test_case_4():\n    assert retira_pontuacao('E quanto valia cada sestércio?') == 'E quanto valia cada sestércio '\n", "def test_case_5():\n    assert retira_pontuacao('Júlio César!') == 'Júlio César '\n", "def test_case_6():\n    assert retira_pontuacao('As curiosidades de Capitu dão para um capítulo.') == 'As curiosidades de Capitu dão para um capítulo '\n", "def test_case_7():\n    assert retira_pontuacao('conte-me as festas da Coroação!') == 'conte me as festas da Coroação '\n", "def test_case_8():\n    assert retira_pontuacao('Oh!') == 'Oh '\n", "def test_case_9():\n    assert retira_pontuacao('Tio Cosme ensinou-lhe gamão.') == 'Tio Cosme ensinou lhe gamão '\n", "def test_case_10():\n    assert retira_pontuacao('Ficou muito tempo com a cara virada para ele.') == 'Ficou muito tempo com a cara virada para ele '\n"]])
    # Removido dado que a solucao depende do problema anterior -> Problema de trás pra frente -> data_array.append(["method", "context", "Manipulação de strings, tuplas e listas"])
    data_array.append(["def piramide_num(n1: int, n2: int) -> list[int]:\n    if (n1 < n2):\n        return list(range(n1,n2+1)) + list(range(n2 - 1,n1-1,-1))\n    else:\n        return list(range(n1,n2-1,-1)) + list(range(n2+1,n1+1))\n", "Faça uma função piramide_num  que construa uma pirâmide de números inteiros, dados dois números. Uma pirâmide de números é na verdade uma sequência de números com as seguintes características: o primeiro valor passado como parâmetro deverá ser o primeiro e o último elemento da sequência, marcando o início e fim da sequência;cada valor dentro da sequência não pode ter uma diferença absoluta maior que um de seu vizinho à direita ou à esquerda.o maior número da sequência estará no meio dela, e corresponde ao segundo número dado como entrada. todos os números na pirâmide aparecem duas vezes na sequência com exceção daquele que está no meio.Sua função receberá como entrada dois números inteiros, e deve retornar uma lista com a sequência correspondente à pirâmide. Exemplos: >>> piramide(3,6) [3,4,5,6,5,4,3] >>> piramide(9,6) [9,8,7,6,7,8,9] >>> piramide(6,6) [6]", "Manipulação de strings, tuplas e listas", ['def test_case_1():\n    assert piramide_num(-4, -10) == [-4, -5, -6, -7, -8, -9, -10, -9, -8, -7, -6, -5, -4]\n', 'def test_case_2():\n    assert piramide_num(13, -20) == [13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20, -19, -18, -17, -16, -15, -14, -13, -12, -11, -10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]\n', 'def test_case_3():\n    assert piramide_num(4, 14) == [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4]\n', 'def test_case_4():\n    assert piramide_num(-12, 17) == [-12, -11, -10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12]\n', 'def test_case_5():\n    assert piramide_num(11, 5) == [11, 10, 9, 8, 7, 6, 5, 6, 7, 8, 9, 10, 11]\n', 'def test_case_6():\n    assert piramide_num(0, 3) == [0, 1, 2, 3, 2, 1, 0]\n', 'def test_case_7():\n    assert piramide_num(11, 6) == [11, 10, 9, 8, 7, 6, 7, 8, 9, 10, 11]\n', 'def test_case_8():\n    assert piramide_num(-8, -19) == [-8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -18, -17, -16, -15, -14, -13, -12, -11, -10, -9, -8]\n', 'def test_case_9():\n    assert piramide_num(-6, 7) == [-6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 6, 5, 4, 3, 2, 1, 0, -1, -2, -3, -4, -5, -6]\n', 'def test_case_10():\n    assert piramide_num(5, 13) == [5, 6, 7, 8, 9, 10, 11, 12, 13, 12, 11, 10, 9, 8, 7, 6, 5]\n', 'def test_case_11():\n    assert piramide_num(-4, -10) == [-4, -5, -6, -7, -8, -9, -10, -9, -8, -7, -6, -5, -4]\n', 'def test_case_12():\n    assert piramide_num(-4, 4) == [-4, -3, -2, -1, 0, 1, 2, 3, 4, 3, 2, 1, 0, -1, -2, -3, -4]\n', 'def test_case_13():\n    assert piramide_num(-17, 10) == [-17, -16, -15, -14, -13, -12, -11, -10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17]\n', 'def test_case_14():\n    assert piramide_num(1, -12) == [1, 0, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -11, -10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1]\n', 'def test_case_15():\n    assert piramide_num(-20, 4) == [-20, -19, -18, -17, -16, -15, -14, -13, -12, -11, -10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 3, 2, 1, 0, -1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18, -19, -20]\n', 'def test_case_16():\n    assert piramide_num(17, -4) == [17, 16, 15, 14, 13, 12, 11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1, 0, -1, -2, -3, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]\n', 'def test_case_17():\n    assert piramide_num(-10, -10) == [-10]\n', 'def test_case_18():\n    assert piramide_num(10, 3) == [10, 9, 8, 7, 6, 5, 4, 3, 4, 5, 6, 7, 8, 9, 10]\n', 'def test_case_19():\n    assert piramide_num(13, 9) == [13, 12, 11, 10, 9, 10, 11, 12, 13]\n', 'def test_case_20():\n    assert piramide_num(1, 7) == [1, 2, 3, 4, 5, 6, 7, 6, 5, 4, 3, 2, 1]\n']])
    data_array.append(["def colchao(lista: list[int],H: int,L: int) -> bool:\n    maior = max(L,H)\n    menor = min(L,H)\n    if lista[1] > maior:\n        return False\n    else:\n        if lista[0] > menor:\n            return False\n        else:\n            return True\n", "Questão OBI (Olimpíada Brasileira de Informática - OBI2012, Fase 1, Nível 2) - (Colchão)\n\nJoão está comprando móveis novos para sua casa. Agora é a vez de comprar um colchão novo, de molas, para substituir o colchão velho. As portas de sua casa têm altura H e largura L e existe um colchão que está em promoção com dimensões A × B × C. O colchão tem a forma de um paralelepípedo reto retângulo e João só consegue arrastá-lo através de uma porta com uma de suas faces paralelas ao chão, mas consegue virar e rotacionar o colchão antes de passar pela porta. Entretanto, de nada adianta ele comprar o colchão se ele não passar através das portas de sua casa. Portanto ele quer saber se consegue passar o colchão pelas portas e para isso precisa de sua ajuda. Faça uma função definida por colchao(medidas,H,L) para resolver esse problema, onde medidas é uma lista com os tamanhos inteiros A, B e C, e H e L são os tamanhos inteiros da altura e largura da porta, respectivamente.\nEntrada: Os parâmetros de entrada são uma lista com as dimensões do colchão em centímetros, ordenadas da menor para a maior, e dois inteiros H e L, correspondentes respectivamente a altura e a largura das portas em centímetros.\nSaída: A sua função deve retornar True se o colchão passa pelas portas e False caso contrário.\nExemplos:\nEntrada: [25,120,220], 200, 100 ; Saída: True\nEntrada: [25,205,220], 200, 100 ; Saída: False\nEntrada: [25,200,220], 200, 100 ; Saída: True", "Listas e Dicionários", ['def test_case_1():\n    assert colchao([24, 187, 207], 194, 99) == True\n', 'def test_case_2():\n    assert colchao([23, 194, 205], 184, 164) == False\n', 'def test_case_3():\n    assert colchao([21, 199, 202], 199, 201) == True\n', 'def test_case_4():\n    assert colchao([38, 195, 211], 191, 139) == False\n', 'def test_case_5():\n    assert colchao([34, 182, 205], 182, 142) == True\n', 'def test_case_6():\n    assert colchao([28, 187, 215], 183, 144) == False\n', 'def test_case_7():\n    assert colchao([22, 180, 204], 181, 126) == True\n', 'def test_case_8():\n    assert colchao([30, 197, 202], 182, 165) == False\n', 'def test_case_9():\n    assert colchao([24, 192, 207], 193, 246) == True\n', 'def test_case_10():\n    assert colchao([36, 190, 209], 187, 248) == True\n']])
    
    # 06 - Fatiamento e manipulação de listas
    # Sem gabarito -> problema altera frase -> data_array.append(["method", "context", "Fatiamento e manipulação de listas"])
    # Sem gabarito -> problema faltas no campeonato -> data_array.append(["method", "context", "Fatiamento e manipulação de listas"])
    data_array.append(["def insere(lista: List[int], n: int) -> List[int]:\n    lista=lista+[n]\n    return sorted(lista)", "Faça uma função definida por insere(lista_numero, n) que dada uma lista ordenada (crescente) de números inteiros e um número inteiro n, inclua n na posição correta. Retorne a lista atualizada.", "Fatiamento e manipulação de listas", ['def test_case_1():\n    assert insere([7, 17], 16) == [7, 16, 17]\n', 'def test_case_2():\n    assert insere([3, 9, 15], 19) == [3, 9, 15, 19]\n', 'def test_case_3():\n    assert insere([3, 11], 12) == [3, 11, 12]\n', 'def test_case_4():\n    assert insere([2, 12], 8) == [2, 8, 12]\n', 'def test_case_5():\n    assert insere([15, 16], 6) == [6, 15, 16]\n', 'def test_case_6():\n    assert insere([3, 16, 18], 6) == [3, 6, 16, 18]\n', 'def test_case_7():\n    assert insere([16, 18], 11) == [11, 16, 18]\n', 'def test_case_8():\n    assert insere([7, 9, 18, 19], 17) == [7, 9, 17, 18, 19]\n', 'def test_case_9():\n    assert insere([1, 4, 18], 6) == [1, 4, 6, 18]\n', 'def test_case_10():\n    assert insere([4, 9, 10, 15], 18) == [4, 9, 10, 15, 18]\n']])
    data_array.append(["def maiores(lista: list[int], n: int) -> list[int]:\n    lista = lista+[n]\n    list.sort(lista)\n    list.reverse(lista)\n    indice=list.index(lista,n)\n    sublista=lista[:indice]\n    list.reverse(sublista)\n    return sublista\n", "Faça uma função chamada maiores que dada uma lista ordenada L (decrescente) de números inteiros e um número inteiro n, retorne a sublista formada por todos os elementos maiores que n em ordem decrescente.", "Fatiamento e manipulação de listas", ['def test_case_1():\n    assert maiores([16, 12, 2, 4, 13, 18, 10, 17, 1], 20) == []\n', 'def test_case_2():\n    assert maiores([15, 18, 3, 19, 14, 10], 2) == [3, 10, 14, 15, 18, 19]\n', 'def test_case_3():\n    assert maiores([11], 4) == [11]\n', 'def test_case_4():\n    assert maiores([1, 3, 2], 10) == []\n', 'def test_case_5():\n    assert maiores([8, 14, 15, 5, 11, 7, 2, 16, 12], 6) == [7, 8, 11, 12, 14, 15, 16]\n', 'def test_case_6():\n    assert maiores([2, 16, 10, 14, 1, 12, 18, 5], 11) == [12, 14, 16, 18]\n', 'def test_case_7():\n    assert maiores([16, 6, 13, 3, 7, 18, 15], 2) == [3, 6, 7, 13, 15, 16, 18]\n', 'def test_case_8():\n    assert maiores([7, 11, 3], 8) == [11]\n', 'def test_case_9():\n    assert maiores([10, 13, 4, 7], 18) == []\n', 'def test_case_10():\n    assert maiores([17, 7, 13, 15], 20) == []\n']])
    # Removido dado que a solucao depende do problema anterior -> Problema acima da média depende da funcao maiores -> data_array.append(["method", "context", "Fatiamento e manipulação de listas"])
    # Sem gabarito -> problema ordenada? -> data_array.append(["method", "context", "Fatiamento e manipulação de listas"])
    
    # 07 - Estrutura de repetição com teste de parada: While
    data_array.append(["def filtraMultiplos(l: list[int], n: int) -> list[int]:\n    i=0\n    divn=[]\n    while (i<len(l)):\n        if l[i]%n==0:\n            list.append(divn,l[i])\n        i+=1\n    return divn\n", "Faça uma função chamada filtraMultiplos para filtrar os múltiplos de um número n. Sua função deve receber como entrada uma lista de números e um número, e retornar outra lista contendo todos os elementos da lista original que forem divisíveis por n.", "Estrutura de repetição com teste de parada: While", ['def test_case_1():\n    assert filtraMultiplos([20, 22, 11, 7, 19, 26, 8, 18, 29, 28, 13, 15, 10], 6) == [18]\n', 'def test_case_2():\n    assert filtraMultiplos([7, 11, 27, 8, 23, 28, 15, 19, 1, 2, 4, 5, 26, 6], 6) == [6]\n', 'def test_case_3():\n    assert filtraMultiplos([27, 19, 10, 26, 17, 8, 4, 15, 29, 9, 28, 12, 22, 16, 3, 14, 1], 4) == [8, 4, 28, 12, 16]\n', 'def test_case_4():\n    assert filtraMultiplos([28, 21, 25, 4, 29, 5, 19, 26, 7, 20, 18, 10, 17, 12], 5) == [25, 5, 20, 10]\n', 'def test_case_5():\n    assert filtraMultiplos([6, 1, 22, 5, 14, 16, 2, 12], 2) == [6, 22, 14, 16, 2, 12]\n', 'def test_case_6():\n    assert filtraMultiplos([8, 21, 24], 7) == [21]\n', 'def test_case_7():\n    assert filtraMultiplos([20, 4, 29, 28, 1, 19, 11, 17, 5, 6, 15, 16, 9, 2, 8, 23], 6) == [6]\n', 'def test_case_8():\n    assert filtraMultiplos([11, 12, 20, 1, 13], 6) == [12]\n', 'def test_case_9():\n    assert filtraMultiplos([23, 2, 9, 25, 3, 13, 15, 11, 17, 6, 7], 8) == []\n', 'def test_case_10():\n    assert filtraMultiplos([1, 2, 29, 25, 6], 8) == []\n', 'def test_case_11():\n    assert filtraMultiplos([30, 32, 18, 37, 43], 7) == []\n', 'def test_case_12():\n    assert filtraMultiplos([45, 16, 8, 35], 8) == [16, 8]\n', 'def test_case_13():\n    assert filtraMultiplos([31, 47, 45, 5, 46, 17, 10, 33], 5) == [45, 5, 10]\n', 'def test_case_14():\n    assert filtraMultiplos([7, 11, 35], 7) == [7, 35]\n', 'def test_case_15():\n    assert filtraMultiplos([36, 8, 4, 14], 4) == [36, 8, 4]\n', 'def test_case_16():\n    assert filtraMultiplos([46, 35, 39, 48, 5, 45, 10, 37], 5) == [35, 5, 45, 10]\n', 'def test_case_17():\n    assert filtraMultiplos([48, 47, 11], 5) == []\n', 'def test_case_18():\n    assert filtraMultiplos([40, 45, 47, 26, 17, 28, 7, 27], 7) == [28, 7]\n', 'def test_case_19():\n    assert filtraMultiplos([22, 6, 44], 6) == [6]\n', 'def test_case_20():\n    assert filtraMultiplos([8, 16, 10, 34, 39, 14], 8) == [8, 16]\n']])
    data_array.append(["def uppCons(frase: str) -> str:\n    frase_tratada = ''\n    i=0\n    while i < len(frase):\n        caractere=frase[i]\n        if caractere in 'bcdfghjklmnpqrstvwxyzç':\n            caractere = str.upper(caractere)\n        frase_tratada = frase_tratada + caractere    \n        i=i+1\n    return frase_tratada\n", "Faça uma função chamada uppCons que receba como entrada uma frase e retorne a frase com todas as suas consoantes em maiúsculas (e os demais caracteres exatamente como estavam na frase original).", "Estrutura de repetição com teste de parada: While", ["def test_case_1():\n    assert uppCons('Um homem que podia tudo!') == 'UM HoMeM Que PoDia TuDo!'\n", "def test_case_2():\n    assert uppCons('São jóias viúvas, como eu, Capitu.') == 'São JóiaS ViúVaS, CoMo eu, CaPiTu.'\n", "def test_case_3():\n    assert uppCons('Ficou muito tempo com a cara virada para ele.') == 'FiCou MuiTo TeMPo CoM a CaRa ViRaDa PaRa eLe.'\n", "def test_case_4():\n    assert uppCons('As curiosidades de Capitu dão para um capítulo.') == 'AS CuRioSiDaDeS De CaPiTu Dão PaRa uM CaPíTuLo.'\n", "def test_case_5():\n    assert uppCons('Oh!') == 'OH!'\n", "def test_case_6():\n    assert uppCons('conte-me as festas da Coroação!') == 'CoNTe-Me aS FeSTaS Da CoRoaÇão!'\n", "def test_case_7():\n    assert uppCons('Fui devagar, mas ou o pé ou o espelho traiu-me.') == 'Fui DeVaGaR, MaS ou o Pé ou o eSPeLHo TRaiu-Me.'\n", "def test_case_8():\n    assert uppCons('Anda apanhar um capotinho, Capitu, dizia-lhe ele.') == 'ANDa aPaNHaR uM CaPoTiNHo, CaPiTu, DiZia-LHe eLe.'\n", "def test_case_9():\n    assert uppCons('Júlio César!') == 'JúLio CéSaR!'\n", "def test_case_10():\n    assert uppCons('Tio Cosme ensinou-lhe gamão.') == 'Tio CoSMe eNSiNou-LHe GaMão.'\n"]])
    data_array.append(["def posLetra(frase: str,letra: str,ocorrencia: int) -> int:\n    pos = 0\n    contador = 0\n    while pos < len(frase):\n        if frase[pos] == letra:\n            contador = contador + 1\n        if contador == ocorrencia:\n            return pos\n        pos = pos + 1\n    return -1\n", "Faça uma função chamada posLetra que recebe como entrada uma string, uma letra, e um número que indica a ocorrência desejada da letra (1 para primeira ocorrência, 2 para segunda, etc). Sua função deve retornar em que posição da string aquela ocorrência da letra está. Caso exista menos ocorrências da letra do que a ocorrência pedida, a função deve retornar -1.Exemplo:>>> posLetra(\"mariana come banana\", 'a', 3) 6 (posição da terceira ocorrência da letra 'a' na string dada)", "Estrutura de repetição com teste de parada: While", ["def test_case_1():\n    assert posLetra('foi pelas festas da coroação', 's', 4) == -1\n", "def test_case_2():\n    assert posLetra('conte-me as festas da coroação', 'e', 1) == 4\n", "def test_case_3():\n    assert posLetra('ficou muito tempo com a cara virada para ele', 'f', 1) == 0\n", "def test_case_4():\n    assert posLetra('as curiosidades de capitu dão para um capítulo', 'p', 4) == -1\n", "def test_case_5():\n    assert posLetra('tu quoque brute?', 't', 1) == 0\n", "def test_case_6():\n    assert posLetra('que fazia tudo', 'e', 1) == 2\n", "def test_case_7():\n    assert posLetra('um homem que podia tudo', 't', 2) == -1\n", "def test_case_8():\n    assert posLetra('nascera muito depois daquelas festas célebres', 'e', 1) == 4\n", "def test_case_9():\n    assert posLetra('tio cosme ensinou-lhe gamão', 's', 1) == 6\n", "def test_case_10():\n    assert posLetra('e quanto valia cada sestércio?', 's', 3) == -1\n"]])
    data_array.append(["def repetidos(l: list[int]) -> int:\n    i=1\n    cont=0\n    while i<len(l):\n        if l[i]==l[i-1]:\n            cont+=1\n        i+=1\n    return cont\n", "context", "Estrutura de repetição com teste de parada: While", ['def test_case_1():\n    assert repetidos([24, 14, 9, 29, 5, 13, 27, 22, 8, 18, 18, 15, 12, 12]) == 2\n', 'def test_case_2():\n    assert repetidos([20, 20, 1, 29, 26, 26, 7, 7]) == 3\n', 'def test_case_3():\n    assert repetidos([27, 27, 2, 2, 15, 15, 4, 28, 28, 20, 20, 21, 14, 17, 25, 25]) == 6\n', 'def test_case_4():\n    assert repetidos([4, 4, 10, 9, 9, 11, 11, 24, 23]) == 3\n', 'def test_case_5():\n    assert repetidos([25, 20, 3, 6, 26, 7, 27, 5, 5, 12, 22, 17, 17, 24, 16]) == 2\n', 'def test_case_6():\n    assert repetidos([4, 26, 11, 11, 23, 19, 28, 5, 20, 10]) == 1\n', 'def test_case_7():\n    assert repetidos([10, 23, 23, 27, 27, 9, 9, 6, 6, 29]) == 4\n', 'def test_case_8():\n    assert repetidos([5, 1, 25, 25]) == 1\n', 'def test_case_9():\n    assert repetidos([17, 10, 16, 28, 19, 15, 11, 22, 1, 2, 26, 6, 27, 8, 18, 21, 21, 9, 12, 3]) == 1\n', 'def test_case_10():\n    assert repetidos([5, 5, 21, 21]) == 2\n', 'def test_case_11():\n    assert repetidos([13, 3, 3, 23, 5, 5, 12]) == 2\n', 'def test_case_12():\n    assert repetidos([2, 1, 1, 4, 11, 16, 7, 7, 28, 28, 14, 14, 13, 13, 20, 3, 3, 24, 21, 27, 27, 29, 10, 10]) == 8\n', 'def test_case_13():\n    assert repetidos([16, 19, 3, 3, 12, 14, 21, 25, 24, 24, 23, 23, 5, 13, 10, 9, 27, 27, 2, 2]) == 5\n', 'def test_case_14():\n    assert repetidos([12, 12, 29, 29, 19]) == 2\n', 'def test_case_15():\n    assert repetidos([29, 29, 25, 15, 9, 17, 17, 24, 7, 22, 11, 16, 21, 21, 18, 28, 14, 14]) == 4\n', 'def test_case_16():\n    assert repetidos([1, 4, 3, 3, 2, 3, 3, 3, 3, 5, 4, 6, 6, 7, 6, 8, 8, 7]) == 6\n']])
    data_array.append(["def fatorial(n: int) -> int:\n    fat = 1\n    while n > 0:\n        fat = fat*n\n        n = n-1\n    return fat\n", "Faça uma função chamada fatorial que dado um número, calcule o fatorial deste número. (Não usar a função factorial do módulo math)", "Estrutura de repetição com teste de parada: While", ['def test_case_1():\n    assert fatorial(3) == 6\n', 'def test_case_2():\n    assert fatorial(8) == 40320\n', 'def test_case_3():\n    assert fatorial(6) == 720\n', 'def test_case_4():\n    assert fatorial(1) == 1\n', 'def test_case_5():\n    assert fatorial(7) == 5040\n', 'def test_case_6():\n    assert fatorial(2) == 2\n', 'def test_case_7():\n    assert fatorial(5) == 120\n', 'def test_case_8():\n    assert fatorial(9) == 362880\n', 'def test_case_9():\n    assert fatorial(4) == 24\n']])
    data_array.append(["def faltante(pecas: list[int]) -> int:\n    todas = len(pecas) + 1\n    soma_com = (todas + 1) * todas // 2\n    soma_sem = 0\n    contador = 0\n    while (contador < len(pecas)):\n        soma_sem = soma_sem + pecas[contador]\n        contador = contador + 1\n    return soma_com - soma_sem\n", "context", "Estrutura de repetição com teste de parada: While", ['def test_case_1():\n    assert faltante([1, 2, 3, 4]) == 5\n', 'def test_case_2():\n    assert faltante([2]) == 1\n', 'def test_case_3():\n    assert faltante([1, 2]) == 3\n', 'def test_case_4():\n    assert faltante([1, 2, 3]) == 4\n', 'def test_case_5():\n    assert faltante([1, 2, 4]) == 3\n', 'def test_case_6():\n    assert faltante([1, 2, 3, 5, 6, 7]) == 4\n', 'def test_case_7():\n    assert faltante([1]) == 2\n', 'def test_case_8():\n    assert faltante([1, 2, 3, 4, 5, 7, 8]) == 6\n', 'def test_case_9():\n    assert faltante([1, 2, 4]) == 3\n', 'def test_case_10():\n    assert faltante([2, 3, 4, 5]) == 1\n', 'def test_case_11():\n    assert faltante([1, 3, 4, 5]) == 2\n']])
    
    # 08 - Estrutura de repetição iteradora: for
    data_array.append(["def freq_palavras(frase: str) -> dict:\n    if not re.fullmatch(\"((another)|(value)|(test)| )*\", frase):\n        return None\n    dic = {}\n    lista = frase.split()\n    for palavra in lista:\n        if palavra in dic:\n            dic[palavra] += 1\n        else:\n            dic[palavra] = 1\n    return dic\n", "Construa uma função chamada **freq_palavras(frases)** que receba uma string e retorne um dicionário onde cada palavra dessa string seja uma chave e tenha como valor o número de vezes que a palavra aparece. Por exemplo: \n\n- freq_palavras(\"dinheiro é dinheiro e vice versa\") \n\nRetorna o dicionário: { \"dinheiro\":2, \"é\": 1, \"e\": 1, \"vice\": 1, \"versa\":1}", "Estrutura de repetição iteradora: for", ["def test_case_1():\n    assert freq_palavras('Hoje visitei a velha estação de trem. A estação estava coberta de abandono. Porque, hoje, as pessoas parecem não dar bola para construções velhas como essa da estação de trem. Muitas pessoas só querem saber de coisas futuras. Dão bola só para coisas novas.') == {'Hoje': 1, 'visitei': 1, 'a': 1, 'velha': 1, 'estação': 3, 'de': 4, 'trem.': 2, 'A': 1, 'estava': 1, 'coberta': 1, 'abandono.': 1, 'Porque,': 1, 'hoje,': 1, 'as': 1, 'pessoas': 2, 'parecem': 1, 'não': 1, 'dar': 1, 'bola': 2, 'para': 2, 'construções': 1, 'velhas': 1, 'como': 1, 'essa': 1, 'da': 1, 'Muitas': 1, 'só': 2, 'querem': 1, 'saber': 1, 'coisas': 2, 'futuras.': 1, 'Dão': 1, 'novas.': 1}\n", "def test_case_2():\n    assert freq_palavras('A voz do povo é a voz de Deus. (ditado popular).') == {'A': 1, 'voz': 2, 'do': 1, 'povo': 1, 'é': 1, 'a': 1, 'de': 1, 'Deus.': 1, '(ditado': 1, 'popular).': 1}\n", "def test_case_3():\n    assert freq_palavras('Tinha uma pedra no meio do caminho. No meio do caminho tinha uma pedra. (Drummond).') == {'Tinha': 1, 'uma': 2, 'pedra': 1, 'no': 1, 'meio': 2, 'do': 2, 'caminho.': 1, 'No': 1, 'caminho': 1, 'tinha': 1, 'pedra.': 1, '(Drummond).': 1}\n", "def test_case_4():\n    assert freq_palavras('Ando com muitas dúvidas. Ando com muitas angústias. Ando com muitos medos.') == {'Ando': 3, 'com': 3, 'muitas': 2, 'dúvidas.': 1, 'angústias.': 1, 'muitos': 1, 'medos.': 1}\n", "def test_case_5():\n    assert freq_palavras('Fulaninho chega, funalinho acha que está arrasando.') == {'Fulaninho': 1, 'chega,': 1, 'funalinho': 1, 'acha': 1, 'que': 1, 'está': 1, 'arrasando.': 1}\n"]])
    data_array.append(["def total(compras: List[int], produtos: Dict[str, float]) -> float:\n    soma = 0\n    for produto in compras:\n        if produto in produtos:\n            soma += produtos[produto]\n    return round(soma,2)", "Escreva uma função chamada total que recebe uma lista de compras e um dicionário contendo o preço de cada produto disponível em uma determinada loja, e retorna o valor total dos itens da lista que estejam disponíveis nesta loja. Por exemplo, para os dados:\nlista de compras = [’biscoito’, ’chocolate’, ’farinha’]\nprodutos = { ’amaciante’:4.99, ’arroz’:10.90, ’biscoito’:1.69, ’cafe’:6.98, ’chocolate’:3.79, ’farinha’:2.99 } \nO valor retornado pela função será 8.47. Retorne seu resultado somente com 2 casas decimais, utilizando a função round(número, 2).", "Dicionário", ["def test_case_1():\n    assert total(['Chocolate pó', 'Azeitonas', 'Lentilha', 'Molho tomate', 'Creme leite'], {'Farinha rosca': 6.72, 'Arroz': 1.93, 'Massas': 2.39, 'Maionese': 7.61, 'Leite condens.': 6.55, 'Sal': 4.9, 'Far.mandioca': 8.91, 'Queijo ralado': 9.6, 'Chá': 9.08, 'Catchup': 7.19, 'Noz-moscada': 1.03, 'Leite coco': 2.75, 'Feijão': 6.32, 'Extrato tomate': 4.84, 'Farinha trigo': 4.42, 'Molho tomate': 8.31, 'Açúcar': 9.39, 'Maizena': 8.23, 'Chocolate pó': 6.81, 'Azeitonas': 9.51, 'Grão de bico': 7.49, 'Louro': 1.68, 'Vinagre': 8.51, 'Lentilha': 4.11, 'Gelatina pó': 9.11, 'Orégano': 1.47, 'Creme leite': 3.34, 'Palmito': 8.22}) == 32.08\n", "def test_case_2():\n    assert total(['Farinha trigo', 'Sal', 'Coco ralado', 'Milho verde', 'Maionese', 'Sardinha lata', 'Molho tomate'], {'Farinha rosca': 5.21, 'Ervilhas lata': 6.21, 'Leite condens.': 5.28, 'Coco ralado': 3.22, 'Maionese': 6.28, 'Milho verde': 4.72, 'Atum lata': 7.51, 'Sardinha lata': 5.34, 'Sal': 0.94, 'Queijo ralado': 6.59, 'Leite longavida': 3.79, 'Leite coco': 7.96, 'Feijão': 5.51, 'Extrato tomate': 6.27, 'Café': 4.41, 'Molho tomate': 5.04, 'Orégano': 6.12, 'Mostarda': 9.7, 'Azeite': 3.08, 'Milho pipoca': 3.89, 'Açúcar': 9.04, 'Trigo': 3.55, 'Far.mandioca': 7.17, 'Azeitonas': 1.66, 'Farinha trigo': 1.91, 'Curry': 2.86, 'Palmito': 6.31, 'Creme leite': 0.69, 'Ervilha verde': 2.83, 'Grão de bico': 8.27}) == 27.45\n", "def test_case_3():\n    assert total(['Feijão', 'Maizena', 'Atum lata'], {'Arroz': 0.86, 'Farinha rosca': 4.29, 'Massas': 9.2, 'Trigo': 1.92, 'Maionese': 7.0, 'Milho verde': 9.98, 'Aveia': 2.66, 'Atum lata': 9.38, 'Sardinha lata': 3.0, 'Coco ralado': 6.54, 'Noz-moscada': 4.22, 'Feijão': 2.56, 'Café': 8.14, 'Molho tomate': 1.55, 'Mostarda': 5.05, 'Azeite': 8.53, 'Maizena': 2.94, 'Chocolate pó': 2.81, 'Farinha trigo': 3.88, 'Massa bolo': 4.02, 'Curry': 0.73, 'Orégano': 5.02, 'Ervilha verde': 7.58}) == 14.88\n", "def test_case_4():\n    assert total(['Feijão', 'Chocolate pó', 'Leite coco', 'Vinagre', 'Massas', 'Ervilha verde'], {'Arroz': 4.9, 'Ervilhas lata': 6.01, 'Massas': 5.47, 'Coco ralado': 1.12, 'Maionese': 0.55, 'Aveia': 6.9, 'Leite condens.': 1.14, 'Far.mandioca': 3.34, 'Leite longavida': 5.25, 'Noz-moscada': 1.63, 'Leite coco': 3.8, 'Feijão': 1.04, 'Extrato tomate': 6.88, 'Café': 8.32, 'Louro': 3.42, 'Molho tomate': 5.36, 'Macarrão inst.': 3.4, 'Mostarda': 9.95, 'Azeite': 1.81, 'Milho pipoca': 3.84, 'Açúcar': 6.92, 'Maizena': 4.99, 'Chocolate pó': 1.77, 'Azeitonas': 2.46, 'Farinha trigo': 7.32, 'Massa bolo': 7.43, 'Vinagre': 2.76, 'Lentilha': 3.9, 'Atum lata': 9.33, 'Gelatina pó': 6.1, 'Creme leite': 2.99, 'Ervilha verde': 1.67, 'Grão de bico': 2.08}) == 16.51\n", "def test_case_5():\n    assert total(['Feijão', 'Molho tomate', 'Lentilha', 'Extrato tomate', 'Cravo da Índia', 'Leite condens.'], {'Farinha rosca': 6.19, 'Massas': 3.18, 'Curry': 4.28, 'Maionese': 8.26, 'Milho verde': 8.97, 'Leite condens.': 9.95, 'Sal': 8.97, 'Cravo da Índia': 3.03, 'Queijo ralado': 3.19, 'Leite longavida': 7.99, 'Leite coco': 1.43, 'Gelatina pó': 1.52, 'Extrato tomate': 9.36, 'Café': 6.29, 'Molho tomate': 8.34, 'Mostarda': 4.94, 'Chocolate pó': 1.45, 'Azeitonas': 5.35, 'Feijão': 5.43, 'Lentilha': 6.54, 'Atum lata': 8.74, 'Creme leite': 6.1, 'Grão de bico': 1.07}) == 42.65\n", "def test_case_6():\n    assert total(['Coco ralado', 'Aveia', 'Cravo da Índia', 'Louro', 'Maizena'], {'Farinha rosca': 8.05, 'Ervilhas lata': 8.94, 'Leite condens.': 8.46, 'Coco ralado': 2.14, 'Maionese': 7.56, 'Milho verde': 4.82, 'Aveia': 7.23, 'Atum lata': 4.08, 'Sardinha lata': 5.37, 'Cravo da Índia': 9.64, 'Queijo ralado': 5.85, 'Leite longavida': 3.89, 'Extrato tomate': 1.79, 'Café': 9.35, 'Molho tomate': 1.49, 'Macarrão inst.': 3.82, 'Milho pipoca': 6.95, 'Maizena': 9.36, 'Louro': 3.14, 'Massa bolo': 2.32, 'Vinagre': 4.24, 'Curry': 8.12, 'Orégano': 3.34, 'Creme leite': 6.36}) == 31.51\n", "def test_case_7():\n    assert total(['Sardinha lata', 'Coco ralado', 'Aveia', 'Sal', 'Arroz'], {'Arroz': 3.76, 'Sardinha lata': 2.9, 'Massa bolo': 6.73, 'Coco ralado': 1.61, 'Queijo ralado': 1.21, 'Sal': 8.69, 'Chá': 7.01, 'Grão de bico': 7.7, 'Aveia': 4.01, 'Açúcar': 2.93, 'Palmito': 5.11}) == 20.97\n", "def test_case_8():\n    assert total(['Far.mandioca', 'Massas', 'Café', 'Lentilha', 'Açúcar', 'Leite longavida', 'Azeitonas'], {'Óleo': 2.74, 'Massas': 8.98, 'Coco ralado': 1.51, 'Maionese': 4.41, 'Leite condens.': 6.2, 'Cravo da Índia': 6.39, 'Leite longavida': 6.23, 'Chá': 2.87, 'Trigo': 6.07, 'Feijão': 0.56, 'Extrato tomate': 6.39, 'Catchup': 6.47, 'Café': 8.83, 'Mostarda': 1.99, 'Azeite': 3.71, 'Açúcar': 4.55, 'Far.mandioca': 6.97, 'Azeitonas': 4.27, 'Farinha trigo': 5.27, 'Massa bolo': 6.06, 'Lentilha': 2.26, 'Creme leite': 8.41, 'Grão de bico': 3.06}) == 42.09\n", "def test_case_9():\n    assert total(['Farinha rosca', 'Creme leite', 'Ervilha verde'], {'Farinha rosca': 9.39, 'Ervilhas lata': 7.05, 'Trigo': 7.22, 'Óleo': 4.7, 'Milho verde': 1.73, 'Atum lata': 2.49, 'Arroz': 2.84, 'Sardinha lata': 3.91, 'Leite longavida': 0.95, 'Feijão': 3.77, 'Café': 5.39, 'Coco ralado': 2.02, 'Molho tomate': 6.86, 'Mostarda': 8.58, 'Azeite': 4.74, 'Sal': 0.83, 'Chocolate pó': 8.04, 'Azeitonas': 0.78, 'Louro': 1.56, 'Gelatina pó': 2.94, 'Palmito': 7.63, 'Creme leite': 8.74, 'Ervilha verde': 6.04, 'Grão de bico': 2.27}) == 24.17\n", "def test_case_10():\n    assert total(['Leite coco', 'Molho tomate', 'Arroz', 'Sardinha lata', 'Coco ralado'], {'Arroz': 7.8, 'Óleo': 2.43, 'Massas': 0.98, 'Coco ralado': 8.74, 'Ervilhas lata': 3.01, 'Maionese': 9.38, 'Aveia': 4.36, 'Chocolate pó': 0.59, 'Sardinha lata': 6.44, 'Far.mandioca': 0.86, 'Queijo ralado': 7.87, 'Catchup': 3.9, 'Chá': 7.4, 'Leite longavida': 0.7, 'Palmito': 3.37, 'Leite coco': 3.18, 'Feijão': 9.65, 'Extrato tomate': 7.45, 'Farinha trigo': 6.45, 'Molho tomate': 9.63, 'Orégano': 6.69, 'Mostarda': 3.76, 'Azeite': 6.25, 'Sal': 8.7, 'Açúcar': 4.73, 'Maizena': 0.77, 'Trigo': 8.86, 'Cravo da Índia': 9.54, 'Azeitonas': 3.16, 'Louro': 9.35, 'Massa bolo': 5.68, 'Vinagre': 7.39, 'Lentilha': 9.77, 'Curry': 0.91, 'Macarrão inst.': 2.33, 'Creme leite': 0.8, 'Ervilha verde': 2.24, 'Grão de bico': 1.61}) == 35.79\n"]])
    data_array.append(["def lingua_p(palavra: str) -> str:\n    palavra = str.lower(palavra)\n    traduzida = ''\n    for c in palavra:\n        traduzida = traduzida + c\n        if c in 'aeiouáàãâéêíóòõú':\n            traduzida = traduzida + 'p' + c\n    return traduzida\n", "Faça uma função chamada lingua_p que receba como parâmetro uma palavra e retorne esta mesma palavra traduzida para a lingua do P. Uma palavra é traduzida para a lingua do P quando, após cada vogal da palavra original, é inserida a sequencia de letras p mais a vogal original.\n\nPor exemplo:\n\nexemplo → epexepemplopo\n\nentao → epentapaopo\n\ncaderno → capadepernopo", "Estrutura de repetição iteradora: for", ["def test_case_1():\n    assert lingua_p('advirdes') == 'apadvipirdepes'\n", "def test_case_2():\n    assert lingua_p('candelabro') == 'capandepelapabropo'\n", "def test_case_3():\n    assert lingua_p('borbulhento') == 'boporbupulhepentopo'\n", "def test_case_4():\n    assert lingua_p('ogivado') == 'opogipivapadopo'\n", "def test_case_5():\n    assert lingua_p('higienizar') == 'hipigipiepenipizapar'\n", "def test_case_6():\n    assert lingua_p('sustivéreis') == 'supustipivépérepeipis'\n", "def test_case_7():\n    assert lingua_p('intravável') == 'ipintrapavápávepel'\n", "def test_case_8():\n    assert lingua_p('penúltimo') == 'pepenúpúltipimopo'\n", "def test_case_9():\n    assert lingua_p('festinhas') == 'fepestipinhapas'\n", "def test_case_10():\n    assert lingua_p('carcereiro') == 'caparceperepeipiropo'\n"]])
    data_array.append(["def qtd_divisores(n: int) -> int:\n    total = 0\n    for contador in range(1,n+1):\n        if n%contador == 0:\n            total += 1\n    return total", "Faça uma função chamada divisores que conte quantos divisores um número tem. Este número será passado como argumento de entrada. Exemplo: Se o número for 10, os divisores são: 1, 2, 5 e 10; total de 4 divisores.", "Estrutura de repetição iteradora: for", ['def test_case_1():\n    assert qtd_divisores(0) == 0\n', 'def test_case_2():\n    assert qtd_divisores(57) == 4\n', 'def test_case_3():\n    assert qtd_divisores(16) == 5\n', 'def test_case_4():\n    assert qtd_divisores(45) == 6\n', 'def test_case_5():\n    assert qtd_divisores(63) == 6\n', 'def test_case_6():\n    assert qtd_divisores(77) == 4\n', 'def test_case_7():\n    assert qtd_divisores(-18) == 0\n', 'def test_case_8():\n    assert qtd_divisores(-4) == 0\n', 'def test_case_9():\n    assert qtd_divisores(-9) == 0\n', 'def test_case_10():\n    assert qtd_divisores(26) == 4\n']])
    data_array.append(["def primo(n: int) -> bool:\n    if n<=1:\n        return False\n    if n ==2 :\n        return True\n    for contador in range(2,n):\n        if n%contador == 0:\n            return False\n    return True\n", "Faça uma função chamada primo que dado um número inteiro positivo, verifique se este número é primo ou não. Retorne um valor booleano. Dica: uma estratégia simples para identificar a primalidade de um número é verificar se não existe nenhum número menor que ele próprio (e maior ou igual a 2) que o divida.  Dica 2: O número de divisões indicado na dica anterior é maior que o necessário. Você consegue reduzi-lo?", "Estrutura de repetição iteradora: for", ['def test_case_1():\n    assert primo(228) == False\n', 'def test_case_2():\n    assert primo(288) == False\n', 'def test_case_3():\n    assert primo(286) == False\n', 'def test_case_4():\n    assert primo(121) == False\n', 'def test_case_5():\n    assert primo(289) == False\n', 'def test_case_6():\n    assert primo(263) == True\n', 'def test_case_7():\n    assert primo(51) == False\n', 'def test_case_8():\n    assert primo(112) == False\n', 'def test_case_9():\n    assert primo(281) == True\n', 'def test_case_10():\n    assert primo(241) == True\n', 'def test_case_11():\n    assert primo(239) == True\n', 'def test_case_12():\n    assert primo(33) == False\n', 'def test_case_13():\n    assert primo(11) == True\n', 'def test_case_14():\n    assert primo(37) == True\n', 'def test_case_15():\n    assert primo(235) == False\n', 'def test_case_16():\n    assert primo(216) == False\n', 'def test_case_17():\n    assert primo(169) == False\n', 'def test_case_18():\n    assert primo(4) == False\n', 'def test_case_19():\n    assert primo(5041) == False\n', 'def test_case_20():\n    assert primo(174) == False\n']])
    data_array.append(["def soma_h(n: int) -> float:\n    soma = 0\n    for denominador in range(1,n+1):\n        soma += 1.0/denominador\n    return round(soma,2)", "Faça uma função chamada soma_h para calcular e retornar o valor H com N termos onde N é inteiro e dado com entrada. Retorne seu resultado somente com 2 casas decimais, utilizando a função round(número, 2)", "Estrutura de repetição iteradora: for", ['def test_case_1():\n    assert soma_h(10) == 2.93\n', 'def test_case_2():\n    assert soma_h(5) == 2.28\n', 'def test_case_3():\n    assert soma_h(1) == 1.0\n', 'def test_case_4():\n    assert soma_h(20) == 3.6\n', 'def test_case_5():\n    assert soma_h(16) == 3.38\n', 'def test_case_6():\n    assert soma_h(10) == 2.93\n', 'def test_case_7():\n    assert soma_h(27) == 3.89\n', 'def test_case_8():\n    assert soma_h(6) == 2.45\n', 'def test_case_9():\n    assert soma_h(28) == 3.93\n', 'def test_case_10():\n    assert soma_h(6) == 2.45\n']])
    
    # 09 - Laços aninhados e matrizes
    data_array.append(["def eh_quadrada(matriz: list[int]) -> bool:\n    if len(matriz)!=0:\n        return len(matriz)==len(matriz[0])\n    else:\n        return True\n", "Faça uma função booleana chamada eh_quadrada para identificar se uma matriz é quadrada. Observação: uma matriz vazia (sem nenhuma linha nem coluna) é considerada quadrada.", "Laços aninhados e matrizes", ['def test_case_1():\n    assert eh_quadrada([[8, 6, 8]]) == False\n', 'def test_case_2():\n    assert eh_quadrada([[7, 3], [5, 1], [7, 9], [0, 7]]) == False\n', 'def test_case_3():\n    assert eh_quadrada([[2, 3], [5, 9], [9, 5], [3, 5], [1, 2]]) == False\n', 'def test_case_4():\n    assert eh_quadrada([[1, 1, 8, 9, 9], [1, 0, 1, 2, 6], [9, 2, 6, 1, 1], [1, 9, 7, 9, 8], [6, 0, 2, 6, 7]]) == True\n', 'def test_case_5():\n    assert eh_quadrada([[8, 0], [3, 8], [7, 2], [0, 8]]) == False\n', 'def test_case_6():\n    assert eh_quadrada([[6, 1, 9]]) == False\n', 'def test_case_7():\n    assert eh_quadrada([[9, 6], [0, 2], [5, 8], [8, 2]]) == False\n', 'def test_case_8():\n    assert eh_quadrada([[3], [4], [3], [3], [8]]) == False\n', 'def test_case_9():\n    assert eh_quadrada([[1, 7]]) == False\n', 'def test_case_10():\n    assert eh_quadrada([[0, 5, 2, 2, 2], [0, 5, 2, 2, 6], [0, 5, 5, 7, 1]]) == False\n', 'def test_case_11():\n    assert eh_quadrada([[1, 1, 2, 4], [2, 7, 6, 2], [5, 9, 8, 1], [5, 9, 5, 7], [5, 2, 6, 2]]) == False\n', 'def test_case_12():\n    assert eh_quadrada([[1, 3, 8, 7, 1], [8, 3, 0, 2, 5]]) == False\n', 'def test_case_13():\n    assert eh_quadrada([[6, 3], [9, 2], [4, 0], [8, 0], [4, 8]]) == False\n', 'def test_case_14():\n    assert eh_quadrada([[2, 1, 8, 3, 8]]) == False\n', 'def test_case_15():\n    assert eh_quadrada([[1, 2, 7], [6, 4, 7], [2, 7, 2], [7, 0, 8]]) == False\n', 'def test_case_16():\n    assert eh_quadrada([[1, 2], [8, 8], [4, 7], [1, 0], [5, 3]]) == False\n', 'def test_case_17():\n    assert eh_quadrada([[3, 9, 0, 4, 3], [6, 8, 3, 1, 5], [9, 2, 4, 1, 9]]) == False\n', 'def test_case_18():\n    assert eh_quadrada([[8, 8, 5, 6], [3, 3, 6, 3], [8, 2, 8, 6], [2, 7, 8, 2], [4, 4, 2, 9]]) == False\n', 'def test_case_19():\n    assert eh_quadrada([[9], [6], [1], [1]]) == False\n', 'def test_case_20():\n    assert eh_quadrada([[4, 5, 0, 1, 6], [7, 4, 3, 3, 4]]) == False\n', 'def test_case_21():\n    assert eh_quadrada([]) == True\n']])
    data_array.append(["def conta_numero(numero: int,matriz: list[int]) -> int:\n    qtd = 0\n    for linha in matriz:\n        qtd += list.count(linha,numero)\n    return qtd\n", "context", "Laços aninhados e matrizes", ['def test_case_1():\n    assert conta_numero(9, [[9, 4, 9, 8, 8]]) == 2\n', 'def test_case_2():\n    assert conta_numero(8, [[0, 8, 0], [4, 2, 5]]) == 1\n', 'def test_case_3():\n    assert conta_numero(8, [[6, 2, 1, 8], [1, 4, 4, 5]]) == 1\n', 'def test_case_4():\n    assert conta_numero(0, [[9, 3, 0], [1, 1, 6]]) == 1\n', 'def test_case_5():\n    assert conta_numero(0, [[8, 1, 4, 8, 2], [4, 6, 4, 0, 8]]) == 1\n', 'def test_case_6():\n    assert conta_numero(2, [[9, 4, 9, 4, 0], [6, 3, 6, 3, 6], [7, 2, 0, 1, 6], [2, 0, 6, 5, 3], [4, 7, 6, 4, 4]]) == 2\n', 'def test_case_7():\n    assert conta_numero(7, [[2, 7]]) == 1\n', 'def test_case_8():\n    assert conta_numero(5, [[1, 7, 9], [8, 0, 9], [0, 6, 1], [8, 6, 5]]) == 1\n', 'def test_case_9():\n    assert conta_numero(3, [[9, 6, 1], [1, 9, 3]]) == 1\n', 'def test_case_10():\n    assert conta_numero(4, [[5, 2], [3, 4], [8, 5]]) == 1\n', 'def test_case_11():\n    assert conta_numero(0, []) == 0\n', 'def test_case_12():\n    assert conta_numero(2, [[3, 4, 5], [6, 7, 8]]) == 0\n']])
    data_array.append(["def media_matriz(matriz: list[int]) -> float:\n    soma = 0\n    for linha in matriz:\n        soma += sum(linha)\n    media = float(soma)/(len(matriz)*len(matriz[0]))\n    return round(media,2)\n", "context", "Laços aninhados e matrizes", ['def test_case_1():\n    assert media_matriz([[7, 1, 2], [8, 2, 4], [2, 4, 6], [5, 1, 3]]) == 3.75\n', 'def test_case_2():\n    assert media_matriz([[5, 4, 1, 5], [4, 4, 3, 9], [2, 8, 7, 6], [5, 8, 9, 4], [2, 5, 2, 7]]) == 5.0\n', 'def test_case_3():\n    assert media_matriz([[2, 2, 4], [5, 7, 8], [5, 9, 4], [0, 0, 4]]) == 4.17\n', 'def test_case_4():\n    assert media_matriz([[5, 0, 5, 0], [0, 9, 5, 0], [6, 1, 5, 2], [0, 6, 9, 4], [1, 0, 5, 1]]) == 3.2\n', 'def test_case_5():\n    assert media_matriz([[5, 7, 9], [3, 0, 6], [1, 3, 8], [4, 7, 4], [6, 6, 8]]) == 5.13\n', 'def test_case_6():\n    assert media_matriz([[0, 6, 1], [0, 9, 7], [9, 9, 2]]) == 4.78\n', 'def test_case_7():\n    assert media_matriz([[7, 4, 8, 3, 7], [1, 2, 3, 5, 8], [8, 6, 1, 8, 1], [9, 9, 9, 5, 8], [3, 8, 5, 0, 5]]) == 5.32\n', 'def test_case_8():\n    assert media_matriz([[9, 7, 9, 9, 9], [9, 3, 3, 2, 8], [1, 3, 4, 4, 3]]) == 5.53\n', 'def test_case_9():\n    assert media_matriz([[7, 2, 5, 2, 7], [7, 5, 3, 5, 5], [9, 1, 2, 4, 1], [9, 3, 5, 5, 5], [6, 5, 4, 8, 6]]) == 4.84\n', 'def test_case_10():\n    assert media_matriz([[3, 8, 0], [1, 4, 3], [6, 6, 6]]) == 4.11\n']])
    data_array.append(["def melhor_volta(matriz: list[list[int]]) -> tuple:\n    menores = []\n    for linha in matriz:\n        menores.append(min(linha))\n        menor = min(menores)\n        corredor = list.index(menores,menor)\n    volta = list.index(matriz[corredor],menor)\n    return corredor+1,menor,volta+1\n", "Uma pista de Kart permite 10 voltas para cada um dos 6 corredores. Faça uma função chamada melhor_volta que receba como entrada uma matriz 6 x 10 com os tempos em segundos dos corredores em cada volta. A função deve retornar uma tupla informando: De quem foi a melhor volta da prova, com qual tempo e em que volta. Assuma que os corredores tem tempos diferentes. (dica: use a função min).", "Laços aninhados e matrizes", ['def test_case_1():\n    assert melhor_volta([[41, 55, 77, 56, 97, 68, 17, 14, 8, 19], [20, 22, 29, 61, 33, 30, 6, 83, 65, 66], [28, 86, 78, 16, 7, 99, 47, 34, 42, 46], [92, 12, 15, 57, 54, 21, 18, 23, 76, 45], [80, 24, 43, 25, 3, 58, 93, 62, 26, 67], [40, 35, 48, 94, 13, 9, 82, 73, 87, 49]]) == (5, 3, 5)\n', 'def test_case_2():\n    assert melhor_volta([[92, 31, 42, 82, 50, 93, 94, 16, 95, 21], [8, 29, 34, 45, 74, 63, 19, 64, 98, 4], [77, 49, 22, 81, 25, 58, 75, 70, 5, 1], [83, 85, 13, 78, 68, 53, 17, 99, 35, 36], [30, 24, 37, 76, 40, 84, 67, 79, 65, 11], [26, 97, 3, 41, 66, 9, 69, 46, 43, 2]]) == (3, 1, 10)\n', 'def test_case_3():\n    assert melhor_volta([[19, 40, 14, 23, 72, 26, 93, 78, 21, 71], [18, 41, 64, 13, 85, 66, 94, 17, 49, 2], [86, 73, 75, 9, 8, 11, 65, 79, 46, 3], [4, 39, 58, 61, 84, 55, 1, 5, 70, 63], [67, 6, 10, 33, 12, 48, 87, 74, 56, 7], [68, 62, 47, 15, 76, 34, 16, 42, 81, 20]]) == (4, 1, 7)\n', 'def test_case_4():\n    assert melhor_volta([[23, 93, 29, 89, 91, 4, 99, 55, 51, 50], [13, 87, 67, 84, 54, 83, 24, 60, 92, 56], [65, 94, 28, 12, 96, 36, 88, 95, 63, 21], [58, 8, 10, 32, 47, 33, 1, 14, 6, 80], [53, 68, 61, 9, 62, 19, 81, 34, 90, 64], [5, 76, 73, 17, 35, 40, 31, 37, 100, 57]]) == (4, 1, 7)\n']])
    data_array.append(["def busca(setor: str, matriz: list) -> list:\n    encontrados = []\n    for i in range(len(matriz)):\n        if matriz[i][2] == setor:\n            encontrados.append([matriz[i][0],matriz[i][1],matriz[i][3]])\n    return encontrados\n", "Suponha que os dados de funcionários de uma empresa sejam armazenados em uma matriz como a do exemplo a seguir: Cada linha da matriz tem quatro entradas, representando as informações referentes a nome, registro, setor e telefone de um funcionário, nesta ordem. O número de linhas depende da quantidade de funcionários. Todas as entradas da matriz estão em formato string.Escreva uma função chamada busca que receba uma matriz como a do exemplo e faça uma busca por setor, ou seja, dado um nome de um setor da empresa, a função retorna os dados de todos os funcionários daquele setor. Por exemplo:>>> busca(\"Contabilidade\", matriz)>>> [['Adalberto Ferreira', '566', '(21)84564-5248'],['Flavia Amorim', '465', '(21)2134-4845']] Se nenhum registro for encontrado, a função deverá retornar uma lista vazia.", "Laços aninhados e matrizes", ["def test_case_1():\n    assert busca('Contabilidade', [['Adalberto Ferreira', '566', 'Contabilidade', '(21)84564-5248'], ['Juliana Vasconcelos', '465', 'RH', '(21)3555-4552'], ['Flavia Amorim', '565', 'Contabilidade', '(21)2134-4845']]) == [['Adalberto Ferreira', '566', '(21)84564-5248'], ['Flavia Amorim', '565', '(21)2134-4845']]\n", "def test_case_2():\n    assert busca('RH', [['Adalberto Ferreira', '566', 'Contabilidade', '(21)84564-5248'], ['Juliana Vasconcelos', '465', 'RH', '(21)3555-4552'], ['Flavia Amorim', '565', 'Contabilidade', '(21)2134-4845']]) == [['Juliana Vasconcelos', '465', '(21)3555-4552']]\n", "def test_case_3():\n    assert busca('Desenvolvimento', [['Adalberto Ferreira', '566', 'Contabilidade', '(21)84564-5248'], ['Juliana Vasconcelos', '465', 'RH', '(21)3555-4552'], ['Flavia Amorim', '565', 'Contabilidade', '(21)2134-4845']]) == []\n"]])
    
    # data_array.append(["def pontos_por_time(jogos: list[list[str, str, list[int, int]]]) -> dict[str, int]:\n    pontuacao = {}\n    \n    for jogo in jogos:\n        time1 = jogo[0]\n        time2 = jogo[1]\n        if time1 not in pontuacao:\n            pontuacao[time1] = 0\n        if time2 not in pontuacao:\n            pontuacao[time2] = 0\n            \n        resultado = jogo[2]\n        if resultado[0] > resultado[1]:\n            pontuacao[time1] += 3\n        elif resultado[0] < resultado[1]:\n            pontuacao[time2] += 3\n        else:\n            pontuacao[time1] += 1\n            pontuacao[time2] += 1\n            \n    return pontuacao\n", "Faça uma função chamada pontos_por_time  que receba uma lista de dois elementos, onde cada elemento é também uma lista. A lista completa tem informações do número de gols em dois jogos de futebol entre dois times (jogo da ida e jogo da volta), no seguinte formato: [['Cormengo', 'Flamínthians', [1, 0]], ['Flamínthians', 'Cormengo', [2, 2]]].Nesta lista de exemplo, no primeiro jogo entre Cormengo e Flamínthians, o Cormengo fez 1 gol e o Flamínthians não fez gol. Sua função deve retornar um dicionário cujos mapeamentos são: <nome do time>  -> <numero total de pontos na fase>. Os pontos de um time na fase são calculados da seguinte forma: em cada jogo, os times recebem três pontos por vitória e um ponto por empate. Não são atribuídos pontos para derrotas. O total de pontos de uma fase é a soma de pontos dos dois jogos da fase. Na lista de exemplo, o total de pontos do Cormengo é 4 e do Flamínthians é 1.", "Listas e Dicionários"])
    # data_array.append(["def count(frase: str, letra: str) -> int:\n    contador = 0\n    for l in frase.lower():\n        if letra == l:\n            contador += 1\n    return contador", "Faça uma função chamada count  que dada uma frase e uma letra, conte quantas vezes aquela letra aparece na frase, só que sem usar a função count()\nAtenção!Maiúsculas e minúsculas também contam! Mas o computador não sabe que elas são iguais, você precisa antes transformá-las!", "Estrutura de repetição iteradora: for"])
    
    
    # data_array.append(["method", "context", "theme"])
    return data_array